import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  File: { input: any; output: any; }
  ISO8601DateTime: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type AcceptJoinRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AcceptJoinRequest */
export type AcceptJoinRequestPayload = {
  __typename?: 'AcceptJoinRequestPayload';
  errors?: Maybe<Array<Error>>;
  joinRequest?: Maybe<JoinRequest>;
};

export type AcceptPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AcceptPartneringRequest */
export type AcceptPartneringRequestPayload = {
  __typename?: 'AcceptPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type AcceptTeamInvitationInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AcceptTeamInvitation */
export type AcceptTeamInvitationPayload = {
  __typename?: 'AcceptTeamInvitationPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type AccepterCompleteCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AccepterCompleteCombatRoom */
export type AccepterCompleteCombatRoomPayload = {
  __typename?: 'AccepterCompleteCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type AccepterReadyCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AccepterReadyCombatRoom */
export type AccepterReadyCombatRoomPayload = {
  __typename?: 'AccepterReadyCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

/** User Activity */
export type Activity = {
  __typename?: 'Activity';
  acceptedPartneringRequests?: Maybe<Array<PartneringRequest>>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gameBundles: Array<GameBundle>;
  gameBundlesAsPilot?: Maybe<Array<GameBundle>>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  nickname?: Maybe<Scalars['String']['output']>;
  paginatedGamerRealtime: Array<PartneringRequest>;
  paginatedGamerSchedules: Array<GameBundle>;
  paginatedPilotRealtime: Array<PartneringRequest>;
  paginatedPilotSchedules: Array<GameBundle>;
  partneringRequests: Array<PartneringRequest>;
  phoneNumber: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** User Activity */
export type ActivityPaginatedGamerRealtimeArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<PartneringRequestState>;
};


/** User Activity */
export type ActivityPaginatedGamerSchedulesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<GameBundleState>;
};


/** User Activity */
export type ActivityPaginatedPilotRealtimeArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<PartneringRequestState>;
};


/** User Activity */
export type ActivityPaginatedPilotSchedulesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<GameBundleState>;
};

/** Sponsor Ads */
export type AdClick = {
  __typename?: 'AdClick';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  sponsorAd: SponsorAd;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
};

export type AddReferrerInput = {
  referralCode: Scalars['String']['input'];
};

/** Autogenerated return type of AddReferrer */
export type AddReferrerPayload = {
  __typename?: 'AddReferrerPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type AddTeamInput = {
  clubId: Scalars['ID']['input'];
  gameId: Scalars['ID']['input'];
  inviteIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of AddTeam */
export type AddTeamPayload = {
  __typename?: 'AddTeamPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type Admin = {
  __typename?: 'Admin';
  canEdit: Scalars['Boolean']['output'];
  canManage: Scalars['Boolean']['output'];
  canViewFinance: Scalars['Boolean']['output'];
  canViewJobs: Scalars['Boolean']['output'];
  canViewUsers: Scalars['Boolean']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isSuper: Scalars['Boolean']['output'];
  role: Scalars['String']['output'];
  supervisor: Scalars['Boolean']['output'];
};

export type AdminLog = {
  __typename?: 'AdminLog';
  admin: Admin;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  targetId?: Maybe<Scalars['ID']['output']>;
  targetType?: Maybe<Scalars['String']['output']>;
};

export type AuthorizationInput = {
  ipAddress?: InputMaybe<Scalars['String']['input']>;
  phoneCode: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
  registrationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of Authorization */
export type AuthorizationPayload = {
  __typename?: 'AuthorizationPayload';
  errors?: Maybe<Array<Error>>;
  jwt?: Maybe<Scalars['String']['output']>;
  pilot?: Maybe<Pilot>;
};

/** Bank Info */
export type BankInfo = {
  __typename?: 'BankInfo';
  bankAccountNo: Scalars['String']['output'];
  bankName: Scalars['String']['output'];
  country: Scalars['String']['output'];
  ic: Scalars['String']['output'];
  icImage?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  pilot?: Maybe<Pilot>;
  rejectReason?: Maybe<Scalars['String']['output']>;
  selfie?: Maybe<Scalars['String']['output']>;
  state: BankInfoState;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
};

export enum BankInfoState {
  Approved = 'approved',
  PendingResubmission = 'pending_resubmission',
  Submitted = 'submitted'
}

/** Banner */
export type Banner = {
  __typename?: 'Banner';
  active: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  endTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  poster: Scalars['Boolean']['output'];
  screen?: Maybe<Scalars['String']['output']>;
  sponsorAd?: Maybe<SponsorAd>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  title: Scalars['String']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

/** Battle */
export type Battle = {
  __typename?: 'Battle';
  battleId?: Maybe<Scalars['String']['output']>;
  camps?: Maybe<Array<Camp>>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  dataId?: Maybe<Scalars['Int']['output']>;
  gameTime?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  paused?: Maybe<Scalars['Boolean']['output']>;
  roomName: Scalars['String']['output'];
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: BattleState;
  stateLeftTime?: Maybe<Scalars['String']['output']>;
  tournamentRoom: TournamentRoom;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  winCampId?: Maybe<Scalars['Int']['output']>;
};

export enum BattleState {
  Adjust = 'adjust',
  Ban = 'ban',
  CampFirstSubmitted = 'camp_first_submitted',
  CampSecondSubmitted = 'camp_second_submitted',
  ConfirmCompleted = 'confirm_completed',
  End = 'end',
  Flagged = 'flagged',
  Init = 'init',
  Loading = 'loading',
  Pending = 'pending',
  Pick = 'pick',
  Play = 'play',
  Started = 'started',
  Unscanned = 'unscanned'
}

/** Block User */
export type BlockUser = {
  __typename?: 'BlockUser';
  blockedUser: User;
  id: Scalars['ID']['output'];
  user: User;
};

export type BlockUserInput = {
  blockUserId: Scalars['ID']['input'];
};

/** Autogenerated return type of BlockUser */
export type BlockUserPayload = {
  __typename?: 'BlockUserPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

/** Booking */
export type Booking = {
  __typename?: 'Booking';
  commission?: Maybe<Scalars['Float']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  gameId: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  isBuyer: Scalars['Boolean']['output'];
  isCreator: Scalars['Boolean']['output'];
  matchMaking: MatchMaking;
  owner: User;
  rating?: Maybe<Scalars['Int']['output']>;
  ratingRemark?: Maybe<Scalars['String']['output']>;
  reportReason?: Maybe<Scalars['String']['output']>;
  reporter?: Maybe<User>;
  state: BookingState;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
};

/** Booking include counter */
export type BookingCount = {
  __typename?: 'BookingCount';
  count: Scalars['Int']['output'];
  data: Array<Booking>;
};

export enum BookingState {
  Cancelled = 'cancelled',
  Completed = 'completed',
  ConfirmCompleted = 'confirm_completed',
  Pending = 'pending',
  Rated = 'rated',
  Refunded = 'refunded',
  Reported = 'reported',
  Reviewed = 'reviewed',
  Started = 'started'
}

/** Cai Leaderboard */
export type CaiLeaderboard = {
  __typename?: 'CaiLeaderboard';
  country?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  score: Scalars['Int']['output'];
  state?: Maybe<Scalars['String']['output']>;
  tier?: Maybe<Scalars['String']['output']>;
  totalMatches?: Maybe<Scalars['Int']['output']>;
  town?: Maybe<Scalars['String']['output']>;
};

/** Camp */
export type Camp = {
  __typename?: 'Camp';
  battle: Battle;
  campId?: Maybe<Scalars['Int']['output']>;
  campPlayers?: Maybe<Array<CampPlayer>>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  killLord?: Maybe<Scalars['Int']['output']>;
  killTower?: Maybe<Scalars['Int']['output']>;
  score?: Maybe<Scalars['Int']['output']>;
  teamName?: Maybe<Scalars['String']['output']>;
  teamSimpleName?: Maybe<Scalars['String']['output']>;
  totalMoney?: Maybe<Scalars['String']['output']>;
  tournamentTeam?: Maybe<TournamentTeam>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Camp Player */
export type CampPlayer = {
  __typename?: 'CampPlayer';
  assistNum?: Maybe<Scalars['Int']['output']>;
  avgFps?: Maybe<Scalars['Int']['output']>;
  banHeroId?: Maybe<Scalars['Int']['output']>;
  banning?: Maybe<Scalars['Boolean']['output']>;
  bigReconnect?: Maybe<Scalars['Int']['output']>;
  camp?: Maybe<Camp>;
  clientIp?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  damageEffect?: Maybe<Scalars['Int']['output']>;
  damagePercent?: Maybe<Scalars['Int']['output']>;
  dead?: Maybe<Scalars['Boolean']['output']>;
  deadNum?: Maybe<Scalars['Int']['output']>;
  equipList?: Maybe<Array<Scalars['String']['output']>>;
  exp?: Maybe<Scalars['Int']['output']>;
  gold?: Maybe<Scalars['Int']['output']>;
  goldMap?: Maybe<Array<Scalars['String']['output']>>;
  heroId?: Maybe<Scalars['Int']['output']>;
  hitRate?: Maybe<Scalars['String']['output']>;
  hurtPercent?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  judger?: Maybe<Scalars['Boolean']['output']>;
  kda?: Maybe<Scalars['Int']['output']>;
  killNum?: Maybe<Scalars['Int']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  majorLeftTime?: Maybe<Scalars['Int']['output']>;
  mapPos?: Maybe<Array<Scalars['String']['output']>>;
  minDamage?: Maybe<Scalars['Int']['output']>;
  minFps?: Maybe<Scalars['Int']['output']>;
  minMoney?: Maybe<Scalars['Int']['output']>;
  moneyPercent?: Maybe<Scalars['Int']['output']>;
  moveLag?: Maybe<Scalars['Int']['output']>;
  mvp?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  offeredRate?: Maybe<Scalars['Int']['output']>;
  picking?: Maybe<Scalars['Boolean']['output']>;
  pos?: Maybe<Scalars['ID']['output']>;
  reviveLeftTime?: Maybe<Scalars['Int']['output']>;
  roleId?: Maybe<Scalars['Int']['output']>;
  runeId?: Maybe<Scalars['Int']['output']>;
  runeMap?: Maybe<Array<Scalars['JSON']['output']>>;
  score?: Maybe<Scalars['String']['output']>;
  skillId?: Maybe<Scalars['Int']['output']>;
  skillLeftTime?: Maybe<Scalars['Int']['output']>;
  skillUseTimes?: Maybe<Scalars['Int']['output']>;
  skinId?: Maybe<Scalars['Int']['output']>;
  smallReconnect?: Maybe<Scalars['Int']['output']>;
  teamId?: Maybe<Scalars['ID']['output']>;
  teamName?: Maybe<Scalars['String']['output']>;
  teamSimpleName?: Maybe<Scalars['String']['output']>;
  timeDelay?: Maybe<Scalars['Int']['output']>;
  totalDamage?: Maybe<Scalars['Int']['output']>;
  totalDamageTower?: Maybe<Scalars['Int']['output']>;
  totalHeal?: Maybe<Scalars['Int']['output']>;
  totalHurt?: Maybe<Scalars['Int']['output']>;
  totalMoney?: Maybe<Scalars['Int']['output']>;
  towerDamagePercent?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  xpm?: Maybe<Scalars['Int']['output']>;
  zoneId?: Maybe<Scalars['ID']['output']>;
};

export type CancelBookingInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelBooking */
export type CancelBookingPayload = {
  __typename?: 'CancelBookingPayload';
  booking: Booking;
  errors?: Maybe<Array<Error>>;
};

export type CancelCombatQueueInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelCombatQueue */
export type CancelCombatQueuePayload = {
  __typename?: 'CancelCombatQueuePayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type CancelCombatRoomInput = {
  id: Scalars['ID']['input'];
  leaderboardId: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelCombatRoom */
export type CancelCombatRoomPayload = {
  __typename?: 'CancelCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type CancelCombatTeamInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelCombatTeam */
export type CancelCombatTeamPayload = {
  __typename?: 'CancelCombatTeamPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type CancelJoinRequestInput = {
  id: Scalars['ID']['input'];
  reportReason?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CancelJoinRequest */
export type CancelJoinRequestPayload = {
  __typename?: 'CancelJoinRequestPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated return type of CancelMatched */
export type CancelMatchedPayload = {
  __typename?: 'CancelMatchedPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type CancelPartneringRequestInput = {
  id: Scalars['ID']['input'];
  reportReason?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CancelPartneringRequest */
export type CancelPartneringRequestPayload = {
  __typename?: 'CancelPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type CancelPilotServiceInput = {
  id: Scalars['ID']['input'];
  reason?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CancelPilotService */
export type CancelPilotServicePayload = {
  __typename?: 'CancelPilotServicePayload';
  errors?: Maybe<Array<Error>>;
  pilotService?: Maybe<PilotService>;
};

export type CancelScrimInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelScrim */
export type CancelScrimPayload = {
  __typename?: 'CancelScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export type CancelTeamInvitationInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelTeamInvitation */
export type CancelTeamInvitationPayload = {
  __typename?: 'CancelTeamInvitationPayload';
  errors?: Maybe<Array<Error>>;
  teamInvitation?: Maybe<TeamInvitation>;
};

export type CancelTournamentInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelTournament */
export type CancelTournamentPayload = {
  __typename?: 'CancelTournamentPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
};

export type CancelTournamentRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelTournamentRoom */
export type CancelTournamentRoomPayload = {
  __typename?: 'CancelTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type CancelTournamentTeamInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CancelTournamentTeam */
export type CancelTournamentTeamPayload = {
  __typename?: 'CancelTournamentTeamPayload';
  errors?: Maybe<Array<Error>>;
  tournamentTeam?: Maybe<TournamentTeam>;
};

export type CancelTournamentUserInput = {
  tournamentId: Scalars['String']['input'];
};

/** Autogenerated return type of CancelTournamentUser */
export type CancelTournamentUserPayload = {
  __typename?: 'CancelTournamentUserPayload';
  errors?: Maybe<Array<Error>>;
  tournamentTeam?: Maybe<TournamentTeam>;
};

/** Career Highlight */
export type CareerHighlight = {
  __typename?: 'CareerHighlight';
  endYear: Scalars['Int']['output'];
  id?: Maybe<Scalars['ID']['output']>;
  position: Scalars['Int']['output'];
  startYear: Scalars['Int']['output'];
  title: Scalars['String']['output'];
};

/** Cart */
export type Cart = {
  __typename?: 'Cart';
  orders: Array<Order>;
  totalAmount: Scalars['Float']['output'];
};

/** Category */
export type Category = {
  __typename?: 'Category';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum CategoryColumns {
  Pricing = 'Pricing',
  Services = 'Services',
  General = 'general'
}

export type ChallengerCompleteCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ChallengerCompleteCombatRoom */
export type ChallengerCompleteCombatRoomPayload = {
  __typename?: 'ChallengerCompleteCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type ChallengerReadyCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ChallengerReadyCombatRoom */
export type ChallengerReadyCombatRoomPayload = {
  __typename?: 'ChallengerReadyCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

/** Chatroom */
export type Chatroom = {
  __typename?: 'Chatroom';
  admin?: Maybe<User>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  chatroomHolder: ChatroomHolder;
  clan?: Maybe<Clan>;
  combatRoom?: Maybe<CombatRoom>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  gameBundle?: Maybe<GameBundle>;
  id: Scalars['ID']['output'];
  lastMessage?: Maybe<Message>;
  messages: Array<Message>;
  messagesCount: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  partneringRequest?: Maybe<PartneringRequest>;
  pilot?: Maybe<SimpleUser>;
  scrim?: Maybe<Scrim>;
  team?: Maybe<Team>;
  unreadCount: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<SimpleUser>;
  users: Array<User>;
};

/** Chatroom Holder */
export type ChatroomHolder = Clan | CombatRoom | GameBundle | PartneringRequest | Scrim | Team | User;

export enum ChatroomMessage {
  Announcement = 'announcement',
  Profile = 'profile',
  Scrim = 'scrim',
  System = 'system',
  Team = 'team',
  Text = 'text'
}

export type CheckChatroomInput = {
  receiverId: Scalars['ID']['input'];
};

/** Autogenerated return type of CheckChatroom */
export type CheckChatroomPayload = {
  __typename?: 'CheckChatroomPayload';
  chatroom?: Maybe<Chatroom>;
  errors?: Maybe<Array<Error>>;
};

/** Check Game Account */
export type CheckGameAccount = {
  __typename?: 'CheckGameAccount';
  acceptedPartneringRequests: Array<SimplePartneringRequest>;
  approve: Scalars['Boolean']['output'];
  game: SimpleGame;
  id: Scalars['ID']['output'];
  onlineSchedules: Array<OnlineSchedule>;
  proficientHerosCount: Scalars['Int']['output'];
  proficientRolesCount: Scalars['Int']['output'];
  suspended: Scalars['Boolean']['output'];
};

export type CheckInTournamentRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CheckInTournamentRoom */
export type CheckInTournamentRoomPayload = {
  __typename?: 'CheckInTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

/** Check Last Payment */
export type CheckLastPayment = {
  __typename?: 'CheckLastPayment';
  creditTransaction?: Maybe<CreditTransaction>;
};

/** Check Pilot */
export type CheckPilot = {
  __typename?: 'CheckPilot';
  acceptedPartneringRequests: Array<SimplePartneringRequest>;
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gameAccounts: Array<CheckGameAccount>;
  id: Scalars['ID']['output'];
  nickname?: Maybe<Scalars['String']['output']>;
  suspend: Scalars['Boolean']['output'];
};

export type CheckPilotInput = {
  nickname: Scalars['String']['input'];
};

/** Autogenerated return type of CheckPilot */
export type CheckPilotPayload = {
  __typename?: 'CheckPilotPayload';
  errors?: Maybe<Array<Error>>;
  pilots?: Maybe<Array<Pilot>>;
};

/** Check Spins */
export type CheckSpins = {
  __typename?: 'CheckSpins';
  creditTransaction?: Maybe<CreditTransaction>;
};

export type CheckoutCartInput = {
  ids: Array<Scalars['ID']['input']>;
  shippingAddressId: Scalars['ID']['input'];
};

/** Autogenerated return type of CheckoutCart */
export type CheckoutCartPayload = {
  __typename?: 'CheckoutCartPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type ChoosePilotRewardInput = {
  id: Scalars['ID']['input'];
  rewardId: Scalars['ID']['input'];
};

/** Autogenerated return type of ChoosePilotReward */
export type ChoosePilotRewardPayload = {
  __typename?: 'ChoosePilotRewardPayload';
  errors?: Maybe<Array<Error>>;
  pilotReward?: Maybe<PilotReward>;
};

export type ClaimRewardAsCreditInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ClaimRewardAsCredit */
export type ClaimRewardAsCreditPayload = {
  __typename?: 'ClaimRewardAsCreditPayload';
  errors?: Maybe<Array<Error>>;
  monthlyReport?: Maybe<MonthlyReport>;
};

/** Clan */
export type Clan = {
  __typename?: 'Clan';
  active: Scalars['Boolean']['output'];
  avatarUrl?: Maybe<Scalars['String']['output']>;
  chatroomId: Scalars['ID']['output'];
  countryCode: Scalars['String']['output'];
  coverPictureUrl: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  featured: Scalars['Boolean']['output'];
  followed: Scalars['Boolean']['output'];
  followersCount: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  introText?: Maybe<Scalars['String']['output']>;
  isAdmin: Scalars['Boolean']['output'];
  joined: Scalars['Boolean']['output'];
  liked: Scalars['Boolean']['output'];
  likesCount: Scalars['Int']['output'];
  memberLimit?: Maybe<Scalars['Int']['output']>;
  members: Array<User>;
  membersCount?: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  onlineCount: Scalars['Int']['output'];
  owner: User;
  postsCount: Scalars['Int']['output'];
  public: Scalars['Boolean']['output'];
  rules?: Maybe<Scalars['String']['output']>;
  targetId?: Maybe<Scalars['ID']['output']>;
  targetType?: Maybe<Scalars['String']['output']>;
  verified: Scalars['Boolean']['output'];
};


/** Clan */
export type ClanMembersArgs = {
  searchUser?: InputMaybe<Scalars['String']['input']>;
};

/** Club */
export type Club = {
  __typename?: 'Club';
  beStar: Scalars['Boolean']['output'];
  clansCount: Scalars['Int']['output'];
  countryCode?: Maybe<Scalars['String']['output']>;
  coverPictureUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  followed: Scalars['Boolean']['output'];
  followersCount: Scalars['Int']['output'];
  founded?: Maybe<Scalars['ISO8601DateTime']['output']>;
  games?: Maybe<Array<Game>>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  introText?: Maybe<Scalars['String']['output']>;
  isManager: Scalars['Boolean']['output'];
  liked: Scalars['Boolean']['output'];
  likesCount: Scalars['Int']['output'];
  manager: User;
  name: Scalars['String']['output'];
  origin?: Maybe<Scalars['String']['output']>;
  overview?: Maybe<Scalars['String']['output']>;
  postsCount: Scalars['Int']['output'];
  tagName?: Maybe<Scalars['String']['output']>;
  teamCount: Scalars['Int']['output'];
  teams: Array<Team>;
  themeColor?: Maybe<Scalars['String']['output']>;
  tier?: Maybe<ClubTier>;
  verified: Scalars['Boolean']['output'];
};

export enum ClubTier {
  Amateur = 'amateur',
  Professional = 'professional',
  SemiPro = 'semi_pro'
}

export enum CodeState {
  CodeApproved = 'code_approved',
  CodeSubmitted = 'code_submitted',
  CodeUnverified = 'code_unverified',
  PendingCodeResubmission = 'pending_code_resubmission'
}

/** Combat Queue */
export type CombatQueue = {
  __typename?: 'CombatQueue';
  combatRoom?: Maybe<CombatRoom>;
  combatTeam: CombatTeam;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  score: Scalars['Int']['output'];
  state: CombatQueueState;
};

export enum CombatQueueState {
  Available = 'available',
  Cancelled = 'cancelled',
  Cooldowned = 'cooldowned',
  Expired = 'expired',
  Matched = 'matched',
  Pending = 'pending'
}

/** Combat Room */
export type CombatRoom = {
  __typename?: 'CombatRoom';
  accepter?: Maybe<CombatTeam>;
  accepterPlayerIds?: Maybe<Array<Pilot>>;
  accepterWinScores: Array<Scalars['Int']['output']>;
  adminNote?: Maybe<Scalars['String']['output']>;
  challengeStatement?: Maybe<Scalars['String']['output']>;
  challenger: CombatTeam;
  challengerPlayerIds?: Maybe<Array<Pilot>>;
  challengerWinScores: Array<Scalars['Int']['output']>;
  chatroom?: Maybe<Chatroom>;
  combatQueues?: Maybe<Array<CombatQueue>>;
  completeTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  countryCode: CountryCode;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currentAccepterScore?: Maybe<Scalars['Int']['output']>;
  currentChallengerScore?: Maybe<Scalars['Int']['output']>;
  currentScores?: Maybe<Array<Scalars['Int']['output']>>;
  duration?: Maybe<Scalars['Float']['output']>;
  entitledScore?: Maybe<Scalars['Int']['output']>;
  host?: Maybe<User>;
  id: Scalars['ID']['output'];
  isChallenger: Scalars['Boolean']['output'];
  isHost: Scalars['Boolean']['output'];
  isHostTeam: Scalars['Boolean']['output'];
  isOwner?: Maybe<Scalars['Boolean']['output']>;
  isWinner?: Maybe<Scalars['Boolean']['output']>;
  loseTeam?: Maybe<Team>;
  matchResult?: Maybe<MatchResult>;
  matchResults?: Maybe<Array<MatchResult>>;
  owner?: Maybe<User>;
  preferEndTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  preferStartTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readiedTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  rivalTeam?: Maybe<Team>;
  roomUrl?: Maybe<Scalars['String']['output']>;
  scoreUpdate?: Maybe<Scalars['Int']['output']>;
  screenshotBattleId?: Maybe<Scalars['String']['output']>;
  screenshotDateTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  screenshotRemark?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: CombatRoomState;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  updatedScores?: Maybe<Array<Scalars['Int']['output']>>;
  validationRemark?: Maybe<Scalars['String']['output']>;
  winTeam?: Maybe<Team>;
};

export enum CombatRoomState {
  AccepterCompleted = 'accepter_completed',
  AccepterIdled = 'accepter_idled',
  AccepterReadied = 'accepter_readied',
  Cancelled = 'cancelled',
  ChallengerCompleted = 'challenger_completed',
  ChallengerIdled = 'challenger_idled',
  ChallengerReadied = 'challenger_readied',
  Completed = 'completed',
  ConfirmCompleted = 'confirm_completed',
  ConfirmStarted = 'confirm_started',
  Flagged = 'flagged',
  Idled = 'idled',
  Matched = 'matched',
  Opened = 'opened',
  Pending = 'pending',
  Reported = 'reported',
  Resolved = 'resolved',
  Reviewed = 'reviewed',
  Started = 'started',
  Unscanned = 'unscanned'
}

/** Combat Team */
export type CombatTeam = {
  __typename?: 'CombatTeam';
  acceptedCombats: Array<CombatRoom>;
  allCombatRooms: Array<CombatRoom>;
  challengedCombats: Array<CombatRoom>;
  combatRoomAdminLogs: Array<AdminLog>;
  combatRooms: Array<CombatRoom>;
  completedMatchesCount: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  currentPosition?: Maybe<Scalars['Int']['output']>;
  currentQueueId?: Maybe<Scalars['ID']['output']>;
  endWeek: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  isOnline: Scalars['Boolean']['output'];
  leaderboard: Leaderboard;
  leaderboardId?: Maybe<Scalars['String']['output']>;
  leaderboards: Array<Leaderboard>;
  matchedQueue?: Maybe<CombatQueue>;
  played: Scalars['Boolean']['output'];
  players: Array<User>;
  poolPrize?: Maybe<PoolPrize>;
  position?: Maybe<Scalars['Int']['output']>;
  preferEndTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  preferStartTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  reason?: Maybe<Scalars['String']['output']>;
  score: Scalars['Int']['output'];
  state: CombatTeamState;
  suspended?: Maybe<Scalars['Boolean']['output']>;
  team: Team;
  teamId?: Maybe<Scalars['String']['output']>;
  totalMatches: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** Combat Team */
export type CombatTeamAllCombatRoomsArgs = {
  leaderboardId?: InputMaybe<Scalars['ID']['input']>;
};

export enum CombatTeamState {
  Banned = 'banned',
  Cancelled = 'cancelled',
  MarkUnderLimit = 'mark_under_limit',
  Participated = 'participated',
  Reactivated = 'reactivated',
  Registered = 'registered',
  Unbanned = 'unbanned'
}

export type CommentPostInput = {
  body: Scalars['String']['input'];
  postId: Scalars['ID']['input'];
};

/** Autogenerated return type of CommentPost */
export type CommentPostPayload = {
  __typename?: 'CommentPostPayload';
  errors?: Maybe<Array<Error>>;
  postComment?: Maybe<PostComment>;
};

export type CompleteBookingInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteBooking */
export type CompleteBookingPayload = {
  __typename?: 'CompleteBookingPayload';
  booking: Booking;
  errors?: Maybe<Array<Error>>;
};

export type CompleteCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteCombatRoom */
export type CompleteCombatRoomPayload = {
  __typename?: 'CompleteCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type CompleteInput = {
  completionScreenshot: Scalars['File']['input'];
  id: Scalars['ID']['input'];
};

export type CompletePartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompletePartneringRequest */
export type CompletePartneringRequestPayload = {
  __typename?: 'CompletePartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of Complete */
export type CompletePayload = {
  __typename?: 'CompletePayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type CompleteScrimInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteScrim */
export type CompleteScrimPayload = {
  __typename?: 'CompleteScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export type CompleteTournamentEventInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteTournamentEvent */
export type CompleteTournamentEventPayload = {
  __typename?: 'CompleteTournamentEventPayload';
  errors?: Maybe<Array<Error>>;
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type CompleteTournamentInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteTournament */
export type CompleteTournamentPayload = {
  __typename?: 'CompleteTournamentPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
};

export type CompleteTournamentRoomInput = {
  id: Scalars['ID']['input'];
  winTeamId: Scalars['ID']['input'];
};

/** Autogenerated return type of CompleteTournamentRoom */
export type CompleteTournamentRoomPayload = {
  __typename?: 'CompleteTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type ConfirmCompleteBattleInput = {
  id: Scalars['ID']['input'];
  tournamentRoomId: Scalars['ID']['input'];
  winCampId: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmCompleteBattle */
export type ConfirmCompleteBattlePayload = {
  __typename?: 'ConfirmCompleteBattlePayload';
  battle?: Maybe<Battle>;
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type ConfirmCompleteBookingInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmCompleteBooking */
export type ConfirmCompleteBookingPayload = {
  __typename?: 'ConfirmCompleteBookingPayload';
  booking: Booking;
  errors?: Maybe<Array<Error>>;
};

export type ConfirmCompleteCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmCompleteCombatRoom */
export type ConfirmCompleteCombatRoomPayload = {
  __typename?: 'ConfirmCompleteCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type ConfirmCompletionInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmCompletion */
export type ConfirmCompletionPayload = {
  __typename?: 'ConfirmCompletionPayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type ConfirmCompletionScrimInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmCompletionScrim */
export type ConfirmCompletionScrimPayload = {
  __typename?: 'ConfirmCompletionScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export type ConfirmEmailInput = {
  email: Scalars['String']['input'];
  phoneCode: Scalars['String']['input'];
};

/** Autogenerated return type of ConfirmEmail */
export type ConfirmEmailPayload = {
  __typename?: 'ConfirmEmailPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type ConfirmStartScrimInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ConfirmStartScrim */
export type ConfirmStartScrimPayload = {
  __typename?: 'ConfirmStartScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export enum Country {
  Indonesia = 'Indonesia',
  Malaysia = 'Malaysia',
  Singapore = 'Singapore'
}

export enum CountryCode {
  Cn = 'CN',
  Id = 'ID',
  My = 'MY',
  Ph = 'PH',
  Sg = 'SG'
}

export type CreateAdClickInput = {
  sponsorAdId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateAdClick */
export type CreateAdClickPayload = {
  __typename?: 'CreateAdClickPayload';
  adClick?: Maybe<AdClick>;
  errors?: Maybe<Array<Error>>;
};

export type CreateBookingInput = {
  matchMakingId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateBooking */
export type CreateBookingPayload = {
  __typename?: 'CreateBookingPayload';
  booking?: Maybe<Booking>;
  errors?: Maybe<Array<Error>>;
};

export type CreateChatroomInput = {
  receiverId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateChatroom */
export type CreateChatroomPayload = {
  __typename?: 'CreateChatroomPayload';
  chatroom?: Maybe<Chatroom>;
  errors?: Maybe<Array<Error>>;
};

export type CreateClanInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  avatar: Scalars['File']['input'];
  coverPicture: Scalars['File']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  introText?: InputMaybe<Scalars['String']['input']>;
  memberLimit?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  ownerId: Scalars['ID']['input'];
  public?: InputMaybe<Scalars['Boolean']['input']>;
  rules?: InputMaybe<Scalars['String']['input']>;
  targetId?: InputMaybe<Scalars['ID']['input']>;
  targetType?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateClan */
export type CreateClanPayload = {
  __typename?: 'CreateClanPayload';
  clan?: Maybe<Clan>;
  errors?: Maybe<Array<Error>>;
};

export type CreateClubInput = {
  coverPicture?: InputMaybe<Scalars['File']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  founded?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  gameId: Scalars['ID']['input'];
  icon: Scalars['File']['input'];
  introText?: InputMaybe<Scalars['String']['input']>;
  inviteIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  origin?: InputMaybe<Scalars['String']['input']>;
  overview?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  tagName?: InputMaybe<Scalars['String']['input']>;
  themeColor?: InputMaybe<Scalars['String']['input']>;
  tier: ClubTier;
  town?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateClub */
export type CreateClubPayload = {
  __typename?: 'CreateClubPayload';
  club?: Maybe<Club>;
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
  user: UserSession;
};

export type CreateCombatQueueInput = {
  teamId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateCombatQueue */
export type CreateCombatQueuePayload = {
  __typename?: 'CreateCombatQueuePayload';
  combatQueue?: Maybe<CombatQueue>;
  errors?: Maybe<Array<Error>>;
};

export type CreateCombatRoomInput = {
  challengeStatement: Scalars['String']['input'];
  leaderboardId: Scalars['ID']['input'];
  preferEndTime: Scalars['ISO8601DateTime']['input'];
  preferStartTime: Scalars['ISO8601DateTime']['input'];
};

/** Autogenerated return type of CreateCombatRoom */
export type CreateCombatRoomPayload = {
  __typename?: 'CreateCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type CreateGameMessageInput = {
  gameChatroomId: Scalars['ID']['input'];
  messageType?: InputMaybe<ChatroomMessage>;
  scrimId?: InputMaybe<Scalars['ID']['input']>;
  teamId?: InputMaybe<Scalars['ID']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateGameMessage */
export type CreateGameMessagePayload = {
  __typename?: 'CreateGameMessagePayload';
  errors?: Maybe<Array<Error>>;
  gameMessage?: Maybe<GameMessage>;
};

export type CreateInput = {
  currentGameRankId: Scalars['ID']['input'];
  currentRankPoint?: InputMaybe<Scalars['Int']['input']>;
  currentRankStar?: InputMaybe<Scalars['Int']['input']>;
  currentRankTier?: InputMaybe<Scalars['Int']['input']>;
  gameId: Scalars['ID']['input'];
  ipAddress?: InputMaybe<Scalars['String']['input']>;
  perspectiveIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  proficientHeroIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  proficientRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  promoCode?: InputMaybe<Scalars['String']['input']>;
  queueIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  remark?: InputMaybe<Scalars['String']['input']>;
  targetGameRankId: Scalars['ID']['input'];
  targetRankPoint?: InputMaybe<Scalars['Int']['input']>;
  targetRankStar?: InputMaybe<Scalars['Int']['input']>;
  targetRankTier?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateJoinRequestInput = {
  proficientRoles?: InputMaybe<Array<Scalars['ID']['input']>>;
  teamId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateJoinRequest */
export type CreateJoinRequestPayload = {
  __typename?: 'CreateJoinRequestPayload';
  errors?: Maybe<Array<Error>>;
  joinRequest?: Maybe<JoinRequest>;
};

export type CreateMatchMakingInput = {
  backgroundImage?: InputMaybe<Scalars['File']['input']>;
  body: Scalars['String']['input'];
  endTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  gameId: Scalars['ID']['input'];
  gameMode: GameMode;
  maximumRankId?: InputMaybe<Scalars['ID']['input']>;
  minimumRankId?: InputMaybe<Scalars['ID']['input']>;
  price: Scalars['Float']['input'];
  queueLimit?: InputMaybe<Scalars['Int']['input']>;
  startTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  title: Scalars['String']['input'];
};

/** Autogenerated return type of CreateMatchMaking */
export type CreateMatchMakingPayload = {
  __typename?: 'CreateMatchMakingPayload';
  errors?: Maybe<Array<Error>>;
  matchMaking?: Maybe<MatchMaking>;
};

export type CreateOrderInput = {
  merchandiseVariantId: Scalars['ID']['input'];
  quantity: Scalars['Int']['input'];
};

/** Autogenerated return type of CreateOrder */
export type CreateOrderPayload = {
  __typename?: 'CreateOrderPayload';
  errors?: Maybe<Array<Error>>;
  order?: Maybe<Order>;
};

export type CreatePartneringRequestInput = {
  durationHour?: InputMaybe<Scalars['Int']['input']>;
  gameId: Scalars['ID']['input'];
  gameRankId: Scalars['ID']['input'];
  inGameName?: InputMaybe<Scalars['String']['input']>;
  ipAddress?: InputMaybe<Scalars['String']['input']>;
  matchCount: Scalars['Int']['input'];
  perspectiveIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  pilotCount: Scalars['Int']['input'];
  proficientRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  promoCode?: InputMaybe<Scalars['String']['input']>;
  queueIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  rankPoint?: InputMaybe<Scalars['Int']['input']>;
  rankStar?: InputMaybe<Scalars['Int']['input']>;
  rankTier?: InputMaybe<Scalars['Int']['input']>;
  serverId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreatePartneringRequest */
export type CreatePartneringRequestPayload = {
  __typename?: 'CreatePartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of Create */
export type CreatePayload = {
  __typename?: 'CreatePayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type CreatePoolPrizeInput = {
  amount: Scalars['Float']['input'];
  name: Scalars['String']['input'];
  ordering: Scalars['Int']['input'];
  tournamentId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePoolPrize */
export type CreatePoolPrizePayload = {
  __typename?: 'CreatePoolPrizePayload';
  errors?: Maybe<Array<Error>>;
  poolPrize?: Maybe<PoolPrize>;
};

export type CreatePostInput = {
  assetId?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
  clanId?: InputMaybe<Scalars['ID']['input']>;
  clubId?: InputMaybe<Scalars['ID']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  interestId?: InputMaybe<Scalars['ID']['input']>;
  playbackId?: InputMaybe<Scalars['String']['input']>;
  postImages?: InputMaybe<Array<Scalars['File']['input']>>;
  postVideo?: InputMaybe<Scalars['File']['input']>;
  targetId?: InputMaybe<Scalars['ID']['input']>;
  targetType?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  uploadId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreatePost */
export type CreatePostPayload = {
  __typename?: 'CreatePostPayload';
  errors?: Maybe<Array<Error>>;
  post?: Maybe<Post>;
};

export type CreateReachInput = {
  sponsorAdId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateReach */
export type CreateReachPayload = {
  __typename?: 'CreateReachPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type CreateScrimInput = {
  completeTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  duration: Scalars['Float']['input'];
  guestId?: InputMaybe<Scalars['ID']['input']>;
  hostId: Scalars['ID']['input'];
  matchCount: Scalars['Int']['input'];
  realtime: Scalars['Boolean']['input'];
  startTime: Scalars['ISO8601DateTime']['input'];
};

/** Autogenerated return type of CreateScrim */
export type CreateScrimPayload = {
  __typename?: 'CreateScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export type CreateShippingAddressInput = {
  address1: Scalars['String']['input'];
  address2?: InputMaybe<Scalars['String']['input']>;
  addressName?: InputMaybe<Scalars['String']['input']>;
  country: Scalars['String']['input'];
  defaultAddress: Scalars['Boolean']['input'];
  latitude?: InputMaybe<Scalars['String']['input']>;
  longitude?: InputMaybe<Scalars['String']['input']>;
  postalCode: Scalars['String']['input'];
  recipientName: Scalars['String']['input'];
  recipientPhoneNumber: Scalars['String']['input'];
  state: ShippingAddressState;
  town: Scalars['String']['input'];
};

/** Autogenerated return type of CreateShippingAddress */
export type CreateShippingAddressPayload = {
  __typename?: 'CreateShippingAddressPayload';
  errors?: Maybe<Array<Error>>;
  shippingAddress?: Maybe<ShippingAddress>;
};

/** Autogenerated return type of CreateSuspendGamerRequest */
export type CreateSuspendGamerRequestPayload = {
  __typename?: 'CreateSuspendGamerRequestPayload';
  errors?: Maybe<Array<Error>>;
  suspendGamerRequest?: Maybe<SuspendGamerRequest>;
};

export type CreateTeamClubInput = {
  country: Scalars['String']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  gameId: Scalars['ID']['input'];
  icon: Scalars['File']['input'];
  memberId?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  state?: InputMaybe<Scalars['String']['input']>;
  tagName?: InputMaybe<Scalars['String']['input']>;
  themeColor: Scalars['String']['input'];
  tier: ClubTier;
  town?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateTeamClub */
export type CreateTeamClubPayload = {
  __typename?: 'CreateTeamClubPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type CreateTeamInput = {
  clubId: Scalars['ID']['input'];
  country: Scalars['String']['input'];
  gameId: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  town?: InputMaybe<Scalars['String']['input']>;
};

export type CreateTeamInvitationInput = {
  teamId: Scalars['ID']['input'];
  teamRoleId?: InputMaybe<Scalars['ID']['input']>;
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTeamInvitation */
export type CreateTeamInvitationPayload = {
  __typename?: 'CreateTeamInvitationPayload';
  errors?: Maybe<Array<Error>>;
  teamInvitation?: Maybe<TeamInvitation>;
};

/** Autogenerated return type of CreateTeam */
export type CreateTeamPayload = {
  __typename?: 'CreateTeamPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type CreateTournamentEventInput = {
  endDate: Scalars['ISO8601DateTime']['input'];
  endTime?: InputMaybe<Scalars['String']['input']>;
  eventType: Event;
  name: Scalars['String']['input'];
  position?: InputMaybe<Scalars['Int']['input']>;
  startDate: Scalars['ISO8601DateTime']['input'];
  startTime?: InputMaybe<Scalars['String']['input']>;
  tournamentId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTournamentEvent */
export type CreateTournamentEventPayload = {
  __typename?: 'CreateTournamentEventPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type CreateTournamentInput = {
  apiKey?: InputMaybe<Scalars['String']['input']>;
  backgroundImage: Scalars['File']['input'];
  clanId: Scalars['ID']['input'];
  countryCode?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  gameId: Scalars['ID']['input'];
  introText?: InputMaybe<Scalars['String']['input']>;
  invitationCode?: InputMaybe<Scalars['String']['input']>;
  logo: Scalars['File']['input'];
  mode?: InputMaybe<TournamentMode>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateTournament */
export type CreateTournamentPayload = {
  __typename?: 'CreateTournamentPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
};

export type CreateTournamentRoomInput = {
  battleType: TournamentRoomBattle;
  roomName: Scalars['String']['input'];
  tournamentEventId: Scalars['ID']['input'];
  tournamentTeamIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateTournamentRoom */
export type CreateTournamentRoomPayload = {
  __typename?: 'CreateTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentEvent?: Maybe<TournamentEvent>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type CreateTournamentSettingInput = {
  tournamentId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTournamentSetting */
export type CreateTournamentSettingPayload = {
  __typename?: 'CreateTournamentSettingPayload';
  errors?: Maybe<Array<Error>>;
  tournamentSetting?: Maybe<TournamentSetting>;
};

export type CreateTournamentTeamInput = {
  captainId: Scalars['ID']['input'];
  playerIds: Array<Scalars['ID']['input']>;
  subPlayerIds: Array<Scalars['ID']['input']>;
  tournamentId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTournamentTeam */
export type CreateTournamentTeamPayload = {
  __typename?: 'CreateTournamentTeamPayload';
  errors?: Maybe<Array<Error>>;
  tournamentTeam?: Maybe<TournamentTeam>;
};

export type CreateTournamentUserInput = {
  tournamentId: Scalars['String']['input'];
};

/** Autogenerated return type of CreateTournamentUser */
export type CreateTournamentUserPayload = {
  __typename?: 'CreateTournamentUserPayload';
  errors?: Maybe<Array<Error>>;
  tournamentUser?: Maybe<TournamentUser>;
};

/** Credit Transaction */
export type CreditTransaction = {
  __typename?: 'CreditTransaction';
  amount: Scalars['Float']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditWallet: CreditWallet;
  currency: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isCredit: Scalars['Boolean']['output'];
  isDebit: Scalars['Boolean']['output'];
  leaderboardPoolPrize?: Maybe<Leaderboard>;
  order?: Maybe<Order>;
  spinnable: Scalars['Boolean']['output'];
  state: Scalars['String']['output'];
  targetId?: Maybe<Scalars['ID']['output']>;
  targetType?: Maybe<Scalars['String']['output']>;
  teamWallet: TeamWallet;
  token?: Maybe<Scalars['String']['output']>;
  transactionCategory: Scalars['Boolean']['output'];
  transactionType: Transaction;
  userPrizes?: Maybe<Array<UserPrize>>;
};

/** Credit Transaction include counter */
export type CreditTransactionsCount = {
  __typename?: 'CreditTransactionsCount';
  count: Scalars['Int']['output'];
  data: Array<CreditTransaction>;
};

/** Credit Wallet */
export type CreditWallet = {
  __typename?: 'CreditWallet';
  amount: Scalars['Float']['output'];
  amountAsMoney?: Maybe<Scalars['String']['output']>;
  countryCode: CountryCode;
  creditTransactions: Array<CreditTransaction>;
  credits: Array<CreditTransaction>;
  currency?: Maybe<Scalars['String']['output']>;
  debits: Array<CreditTransaction>;
  id: Scalars['ID']['output'];
  kohaiCredit: Scalars['Float']['output'];
  kohaiReceiveCreditTotal: Scalars['Float']['output'];
  kohaiSendCreditTotal: Scalars['Float']['output'];
  payouts: Array<Payout>;
  transactionHistory: Array<CreditTransaction>;
  user: User;
};

export enum Day {
  Anytime = 'anytime',
  Weekdays = 'weekdays',
  WeekendsHolidays = 'weekends_holidays'
}

export type DeleteTeamInput = {
  teamId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteTeam */
export type DeleteTeamPayload = {
  __typename?: 'DeleteTeamPayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean']['output'];
};

/** Error */
export type Error = {
  __typename?: 'Error';
  detail: Scalars['String']['output'];
  path?: Maybe<Scalars['String']['output']>;
};

export enum Event {
  DoubleElimination = 'double_elimination',
  Final = 'final',
  PooledRoundRobin = 'pooled_round_robin',
  RandomPairings = 'random_pairings',
  Registration = 'registration',
  RoundRobin = 'round_robin',
  SemiFinal = 'semi_final',
  SingleElimination = 'single_elimination'
}

export type ExpireGameBundleInput = {
  id: Scalars['ID']['input'];
  reportReason?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of ExpireGameBundle */
export type ExpireGameBundlePayload = {
  __typename?: 'ExpireGameBundlePayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type ExtendPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ExtendPartneringRequest */
export type ExtendPartneringRequestPayload = {
  __typename?: 'ExtendPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** FAQ */
export type Faq = {
  __typename?: 'Faq';
  answer: Scalars['String']['output'];
  apps?: Maybe<FaqApps>;
  categoryColumns: CategoryColumns;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  language: Language;
  position: Scalars['Int']['output'];
  question: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum FaqApps {
  Gamer = 'gamer',
  Infiniti = 'infiniti',
  Partner = 'partner'
}

export type FinderNumber = {
  __typename?: 'FinderNumber';
  clansCount: Scalars['Int']['output'];
  clubsCount: Scalars['Int']['output'];
  usersCount: Scalars['Int']['output'];
};

export type Follow = {
  __typename?: 'Follow';
  createdAt: Scalars['ISO8601DateTime']['output'];
  follower: User;
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type FollowInput = {
  id: Scalars['ID']['input'];
  targetType: Scalars['String']['input'];
};

/** Autogenerated return type of Follow */
export type FollowPayload = {
  __typename?: 'FollowPayload';
  errors?: Maybe<Array<Error>>;
  followed: Scalars['Boolean']['output'];
};

export type ForgetPasswordInput = {
  email: Scalars['String']['input'];
};

/** Autogenerated return type of ForgetPassword */
export type ForgetPasswordPayload = {
  __typename?: 'ForgetPasswordPayload';
  email?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Error>>;
};

/** Game */
export type Game = {
  __typename?: 'Game';
  active?: Maybe<Scalars['Boolean']['output']>;
  combat?: Maybe<Scalars['Boolean']['output']>;
  developerName: Scalars['String']['output'];
  gameAccount?: Maybe<GameAccount>;
  gameAccountsCount?: Maybe<Scalars['Int']['output']>;
  gameChatroomId: Scalars['ID']['output'];
  gameRanks: Array<GameRank>;
  genre?: Maybe<GameGenre>;
  iconUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  interests?: Maybe<Array<Interest>>;
  logoUrl?: Maybe<Scalars['String']['output']>;
  mascotUrl?: Maybe<Scalars['String']['output']>;
  matchmaking?: Maybe<Scalars['Boolean']['output']>;
  minRank?: Maybe<GameRank>;
  name: Scalars['String']['output'];
  ordering?: Maybe<Scalars['Int']['output']>;
  partneringPenaltyRate?: Maybe<Scalars['Int']['output']>;
  partneringRate?: Maybe<Scalars['Int']['output']>;
  perspectives: Array<ProficientRole>;
  platform?: Maybe<GamePlatform>;
  proficientHeros: Array<ProficientHero>;
  proficientLanes?: Maybe<Array<ProficientRole>>;
  proficientRoles: Array<ProficientRole>;
  queues: Array<ProficientRole>;
  realTime?: Maybe<Scalars['Boolean']['output']>;
  schedule?: Maybe<Scalars['Boolean']['output']>;
  screenshotSampleUrl?: Maybe<Array<Scalars['String']['output']>>;
  scrim?: Maybe<Scalars['Boolean']['output']>;
  shortname?: Maybe<Scalars['String']['output']>;
  teamsCount?: Maybe<Scalars['Int']['output']>;
  testPassingScore?: Maybe<Scalars['Int']['output']>;
  themeColor: Scalars['String']['output'];
  vocaCode?: Maybe<Scalars['String']['output']>;
};


/** Game */
export type GameGameAccountArgs = {
  userId: Scalars['ID']['input'];
};

/** Game Account */
export type GameAccount = {
  __typename?: 'GameAccount';
  accountId: Scalars['String']['output'];
  approve: Scalars['Boolean']['output'];
  club?: Maybe<Club>;
  codeState: CodeState;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currentLevel?: Maybe<PilotLevel>;
  currentReport?: Maybe<MonthlyReport>;
  game: Game;
  gameRank: GameRank;
  id: Scalars['ID']['output'];
  inGameName?: Maybe<Scalars['String']['output']>;
  kd?: Maybe<Scalars['Float']['output']>;
  monthlyReports: Array<MonthlyReport>;
  nextLevel?: Maybe<PilotLevel>;
  onlineSchedules: Array<OnlineSchedule>;
  pairableGameRanks: Array<GameRank>;
  pilot: Pilot;
  pilotTier?: Maybe<PilotTier>;
  proficientHeros: Array<ProficientHero>;
  proficientLanes?: Maybe<Array<ProficientRole>>;
  proficientRoles: Array<ProficientRole>;
  rankPoint?: Maybe<Scalars['Int']['output']>;
  rankStar?: Maybe<Scalars['Int']['output']>;
  rankTier?: Maybe<Scalars['Int']['output']>;
  rejectReason?: Maybe<Scalars['String']['output']>;
  remindAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  remindCount: Scalars['Int']['output'];
  screenshotState: ScreenshotState;
  screenshotUrl?: Maybe<Array<Scalars['String']['output']>>;
  serverId?: Maybe<Scalars['String']['output']>;
  suspended: Scalars['Boolean']['output'];
  testRetryCount: Scalars['Int']['output'];
  testScore?: Maybe<Scalars['Float']['output']>;
  testState: TestState;
  typeformUrl?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  verificationCode: Scalars['String']['output'];
  winRate?: Maybe<Scalars['Float']['output']>;
};

/** Game Bundle */
export type GameBundle = {
  __typename?: 'GameBundle';
  adminNote?: Maybe<Scalars['String']['output']>;
  amount: Scalars['Float']['output'];
  bookingId: Scalars['String']['output'];
  chatroom?: Maybe<Chatroom>;
  commission: Scalars['Float']['output'];
  communicationRating?: Maybe<Scalars['Int']['output']>;
  completionScreenshotUrl?: Maybe<Scalars['String']['output']>;
  completionTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency: Scalars['String']['output'];
  currentGameRank: GameRank;
  currentRankPoint?: Maybe<Scalars['Int']['output']>;
  currentRankStar?: Maybe<Scalars['Int']['output']>;
  currentRankTier?: Maybe<Scalars['Int']['output']>;
  estimatedDurationInHour?: Maybe<Scalars['Float']['output']>;
  game: Game;
  id: Scalars['ID']['output'];
  openMic?: Maybe<Scalars['Boolean']['output']>;
  originalAmount: Scalars['Float']['output'];
  perspectives?: Maybe<Array<ProficientRole>>;
  pilot?: Maybe<SimpleUser>;
  pilotGameAccount?: Maybe<SimpleGameAccount>;
  pilotReview?: Maybe<Scalars['String']['output']>;
  proficientHeros: Array<ProficientHero>;
  proficientLanes: Array<ProficientRole>;
  proficientRoles?: Maybe<Array<ProficientRole>>;
  promoCode?: Maybe<Scalars['String']['output']>;
  queues?: Maybe<Array<ProficientRole>>;
  rating?: Maybe<Scalars['Int']['output']>;
  ratingRemark?: Maybe<Scalars['String']['output']>;
  remark?: Maybe<Scalars['String']['output']>;
  reportReason?: Maybe<Scalars['String']['output']>;
  reporter?: Maybe<SimpleUser>;
  skillRating?: Maybe<Scalars['Int']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: GameBundleState;
  targetGameRank: GameRank;
  targetRankPoint?: Maybe<Scalars['Int']['output']>;
  targetRankStar?: Maybe<Scalars['Int']['output']>;
  targetRankTier?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: SimpleUser;
};

export enum GameBundleState {
  Available = 'available',
  Completed = 'completed',
  ConfirmStarted = 'confirm_started',
  ConfirmedCompletion = 'confirmed_completion',
  Expired = 'expired',
  GamerStarted = 'gamer_started',
  Grabbed = 'grabbed',
  Rated = 'rated',
  Refunded = 'refunded',
  Reported = 'reported',
  Reviewed = 'reviewed',
  Started = 'started'
}

export type GameChatroom = {
  __typename?: 'GameChatroom';
  createdAt: Scalars['ISO8601DateTime']['output'];
  game: Game;
  id: Scalars['ID']['output'];
  state: GameChatroomState;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum GameChatroomState {
  Active = 'active',
  Paused = 'paused',
  Resume = 'resume'
}

export enum GameGenre {
  Action = 'action',
  Adventure = 'adventure',
  BattleRoyale = 'battle_royale',
  Card = 'card',
  Casual = 'casual',
  Fighting = 'fighting',
  Fps = 'fps',
  Mmorpg = 'mmorpg',
  Moba = 'moba',
  Puzzle = 'puzzle',
  Racing = 'racing',
  Rpg = 'rpg',
  Sandbox = 'sandbox',
  Shooter = 'shooter',
  Simulation = 'simulation',
  Sports = 'sports',
  Strategy = 'strategy',
  Survival = 'survival',
  TowerDefense = 'tower_defense'
}

/** Game Chatroom Message */
export type GameMessage = {
  __typename?: 'GameMessage';
  _id: Scalars['ID']['output'];
  accountId?: Maybe<Scalars['String']['output']>;
  active: Scalars['Boolean']['output'];
  admin?: Maybe<Admin>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  gameAccountId?: Maybe<Scalars['ID']['output']>;
  gameChatroom: GameChatroom;
  gameChatroomId: Scalars['ID']['output'];
  gameRank?: Maybe<Scalars['String']['output']>;
  hostCountry?: Maybe<Scalars['String']['output']>;
  hostIcon?: Maybe<Scalars['String']['output']>;
  hostId?: Maybe<Scalars['ID']['output']>;
  hostName?: Maybe<Scalars['String']['output']>;
  hostThemeColor?: Maybe<Scalars['String']['output']>;
  hostTier?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  memberCount?: Maybe<Scalars['Int']['output']>;
  messageType: ChatroomMessage;
  rankPoint?: Maybe<Scalars['Int']['output']>;
  rankStar?: Maybe<Scalars['Int']['output']>;
  rankTier?: Maybe<Scalars['Int']['output']>;
  screenshotUrl?: Maybe<Scalars['String']['output']>;
  scrim?: Maybe<Scrim>;
  scrimChatroomId?: Maybe<Scalars['ID']['output']>;
  scrimDuration?: Maybe<Scalars['Float']['output']>;
  scrimId?: Maybe<Scalars['ID']['output']>;
  scrimMatchCount?: Maybe<Scalars['Int']['output']>;
  scrimStartTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  team?: Maybe<Team>;
  teamCountry?: Maybe<Scalars['String']['output']>;
  teamIcon?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['ID']['output']>;
  teamName?: Maybe<Scalars['String']['output']>;
  teamState?: Maybe<Scalars['String']['output']>;
  teamTier?: Maybe<Scalars['String']['output']>;
  teamTown?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
  themeColor?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
  userAvatar?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['ID']['output']>;
  userNickname?: Maybe<Scalars['String']['output']>;
};

/** Game Message include counter */
export type GameMessageCount = {
  __typename?: 'GameMessageCount';
  chatroom: GameChatroom;
  count: Scalars['Int']['output'];
  endReached: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  messages: Array<GameMessage>;
};

export enum GameMode {
  Casual = 'casual',
  Other = 'other',
  Ranked = 'ranked'
}

export enum GamePlatform {
  Console = 'console',
  CrossPlatform = 'cross_platform',
  Desktop = 'desktop',
  Mobile = 'mobile'
}

/** Game Rank */
export type GameRank = {
  __typename?: 'GameRank';
  game: Game;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  ordering: Scalars['Int']['output'];
  rankPointMaxCount?: Maybe<Array<Scalars['Int']['output']>>;
  rankStarMaxCount?: Maybe<Scalars['Int']['output']>;
  rankStarMinCount?: Maybe<Scalars['Int']['output']>;
  rankTierMaxCount?: Maybe<Scalars['Int']['output']>;
};

/** Gamer Banner */
export type GamerBanner = {
  __typename?: 'GamerBanner';
  active: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  endTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  poster: Scalars['Boolean']['output'];
  screen?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  title: Scalars['String']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type GamerStartInput = {
  id: Scalars['ID']['input'];
};

export type GamerStartPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of GamerStartPartneringRequest */
export type GamerStartPartneringRequestPayload = {
  __typename?: 'GamerStartPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of GamerStart */
export type GamerStartPayload = {
  __typename?: 'GamerStartPayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export enum Gender {
  Female = 'female',
  Male = 'male'
}

export type GeneralSearch = {
  __typename?: 'GeneralSearch';
  clans: Scalars['Int']['output'];
  clubs: Scalars['Int']['output'];
  users: Scalars['Int']['output'];
  vocaGames: Scalars['Int']['output'];
};

/** Gift */
export type Gift = {
  __typename?: 'Gift';
  amount: Scalars['Int']['output'];
  currency: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type GrabCombatRoomInput = {
  combatTeamId: Scalars['ID']['input'];
  id: Scalars['ID']['input'];
  leaderboardId: Scalars['ID']['input'];
};

/** Autogenerated return type of GrabCombatRoom */
export type GrabCombatRoomPayload = {
  __typename?: 'GrabCombatRoomPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type GrabInput = {
  id: Scalars['ID']['input'];
};

export type GrabPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of GrabPartneringRequest */
export type GrabPartneringRequestPayload = {
  __typename?: 'GrabPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of Grab */
export type GrabPayload = {
  __typename?: 'GrabPayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type GrabScrimInput = {
  id: Scalars['ID']['input'];
  teamId: Scalars['ID']['input'];
};

/** Autogenerated return type of GrabScrim */
export type GrabScrimPayload = {
  __typename?: 'GrabScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

/** Indicators */
export type Indicator = {
  __typename?: 'Indicator';
  joinRequests: Scalars['Boolean']['output'];
  messages: Scalars['Boolean']['output'];
  teamInvitations: Scalars['Boolean']['output'];
  teamMessages: Scalars['Boolean']['output'];
};

/** Interest */
export type Interest = {
  __typename?: 'Interest';
  active: Scalars['Boolean']['output'];
  iconOffUrl?: Maybe<Scalars['String']['output']>;
  iconOnUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type JoinClanInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of JoinClan */
export type JoinClanPayload = {
  __typename?: 'JoinClanPayload';
  clan?: Maybe<Clan>;
  errors?: Maybe<Array<Error>>;
};

/** Join Request */
export type JoinRequest = {
  __typename?: 'JoinRequest';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  proficientRoles: Array<ProficientRole>;
  state: JoinRequestState;
  team: Team;
  user: User;
};

export enum JoinRequestState {
  Accepted = 'accepted',
  Cancelled = 'cancelled',
  Expired = 'expired',
  Pending = 'pending',
  Rejected = 'rejected'
}

export type Judge = {
  __typename?: 'Judge';
  apiKey?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  ipAddress?: Maybe<Scalars['String']['output']>;
  judgeId: Scalars['String']['output'];
  role: Scalars['String']['output'];
  tournaments?: Maybe<Array<Tournament>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type KickTeamCombatRoomInput = {
  combatRoomId: Scalars['ID']['input'];
  combatTeamId: Scalars['ID']['input'];
};

/** Autogenerated return type of KickTeamCombatRoom */
export type KickTeamCombatRoomPayload = {
  __typename?: 'KickTeamCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export enum Language {
  Bm = 'bm',
  Cn = 'cn',
  En = 'en',
  Id = 'id',
  Ms = 'ms',
  Zh = 'zh'
}

/** Leaderboard */
export type Leaderboard = {
  __typename?: 'Leaderboard';
  beginningTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  beginningWeek: Scalars['ISO8601DateTime']['output'];
  combatEndTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  combatLimit: Scalars['Int']['output'];
  combatTeams: Array<CombatTeam>;
  countryCode: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency: Scalars['String']['output'];
  currentTargetTeamCounts?: Maybe<Scalars['Int']['output']>;
  currentTeam?: Maybe<CombatTeam>;
  endTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  endWeek: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  isMaxPool?: Maybe<Scalars['Boolean']['output']>;
  isOpen: Scalars['Boolean']['output'];
  month: Scalars['String']['output'];
  nextPoolPrizes?: Maybe<Array<PoolPrize>>;
  nextTotalPrize?: Maybe<Scalars['Float']['output']>;
  nextTotalTeamCounts?: Maybe<Scalars['Int']['output']>;
  numberOfWeek: Scalars['Int']['output'];
  poolPrizes?: Maybe<Array<PoolPrize>>;
  registerEndTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  registrationFee: Scalars['Float']['output'];
  state: LeaderboardState;
  templatePoolPrizes?: Maybe<Array<PoolPrize>>;
  totalPrize: Scalars['Float']['output'];
  totalRegisteredTeamCounts: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  year: Scalars['String']['output'];
};


/** Leaderboard */
export type LeaderboardCombatTeamsArgs = {
  page: Scalars['Int']['input'];
};

export enum LeaderboardState {
  Cancelled = 'cancelled',
  CombatStarted = 'combat_started',
  Completed = 'completed',
  RegistrationPeriod = 'registration_period'
}

export type LeaveCombatRoomInput = {
  combatRoomId: Scalars['ID']['input'];
  combatTeamId: Scalars['ID']['input'];
};

/** Autogenerated return type of LeaveCombatRoom */
export type LeaveCombatRoomPayload = {
  __typename?: 'LeaveCombatRoomPayload';
  combatRoom?: Maybe<CombatRoom>;
  errors?: Maybe<Array<Error>>;
};

export type LikeInput = {
  id: Scalars['ID']['input'];
  targetType: Scalars['String']['input'];
};

/** Autogenerated return type of Like */
export type LikePayload = {
  __typename?: 'LikePayload';
  errors?: Maybe<Array<Error>>;
  liked: Scalars['Boolean']['output'];
};

/** Manager */
export type Manager = {
  __typename?: 'Manager';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  chatroom?: Maybe<Chatroom>;
  club?: Maybe<Club>;
  combatQueue?: Maybe<CombatQueue>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditWallet: CreditWallet;
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  language: Language;
  lastSignInAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  managingTeam?: Maybe<Team>;
  managingTeams: Array<Team>;
  nickname?: Maybe<Scalars['String']['output']>;
  phoneNumber: Scalars['String']['output'];
  privateChatroom?: Maybe<Chatroom>;
  referralCode: Scalars['String']['output'];
  signInCount: Scalars['Int']['output'];
  teamChatroom: Chatroom;
  teamChatrooms: Array<Chatroom>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** Manager */
export type ManagerChatroomArgs = {
  id: Scalars['ID']['input'];
};


/** Manager */
export type ManagerManagingTeamArgs = {
  id: Scalars['ID']['input'];
};


/** Manager */
export type ManagerPrivateChatroomArgs = {
  userId: Scalars['ID']['input'];
};


/** Manager */
export type ManagerTeamChatroomArgs = {
  teamId: Scalars['ID']['input'];
};


/** Manager */
export type ManagerTeamChatroomsArgs = {
  teamId: Scalars['ID']['input'];
};

export type MatchMaking = {
  __typename?: 'MatchMaking';
  backgroundImageUrl?: Maybe<Scalars['String']['output']>;
  bookingAccounts: BookingCount;
  bookings?: Maybe<Array<Booking>>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  currentBooking?: Maybe<Booking>;
  endTime: Scalars['ISO8601DateTime']['output'];
  game: Game;
  gameMode: GameMode;
  id: Scalars['ID']['output'];
  inQueue: Scalars['Boolean']['output'];
  isCreator: Scalars['Boolean']['output'];
  matchCount?: Maybe<Scalars['Int']['output']>;
  maximumRank?: Maybe<GameRank>;
  maximumRankId?: Maybe<Scalars['ID']['output']>;
  minimumRank?: Maybe<GameRank>;
  minimumRankId?: Maybe<Scalars['ID']['output']>;
  post: Post;
  price: Scalars['Int']['output'];
  prosOnly?: Maybe<Scalars['Boolean']['output']>;
  queueCount: Scalars['Int']['output'];
  queueLimit?: Maybe<Scalars['Int']['output']>;
  startTime: Scalars['ISO8601DateTime']['output'];
  state: MatchMakingState;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
};


export type MatchMakingBookingAccountsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};

export enum MatchMakingState {
  Available = 'available',
  Inactived = 'inactived'
}

export type MatchResult = {
  __typename?: 'MatchResult';
  combatTeam?: Maybe<CombatTeam>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  loseTeam?: Maybe<Team>;
  resultScreenshots?: Maybe<Array<Scalars['String']['output']>>;
  screenshotRemark?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  winTeam?: Maybe<Team>;
};

/** Merchandise */
export type Merchandise = {
  __typename?: 'Merchandise';
  active: Scalars['Boolean']['output'];
  category: Category;
  club?: Maybe<Club>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Scalars['String']['output']>>;
  merchandiseVariants: Array<MerchandiseVariant>;
  name: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  post: Post;
  startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
};

/** Merchandise Variant */
export type MerchandiseVariant = {
  __typename?: 'MerchandiseVariant';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  merchandise: Merchandise;
  name: Scalars['String']['output'];
  orders: Array<Order>;
  position: Scalars['Int']['output'];
  price: Scalars['Float']['output'];
  sku: Scalars['String']['output'];
  stock: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Chatroom Message */
export type Message = {
  __typename?: 'Message';
  _id: Scalars['ID']['output'];
  chatroomId: Scalars['ID']['output'];
  clan?: Maybe<Clan>;
  clanId?: Maybe<Scalars['ID']['output']>;
  contact?: Maybe<User>;
  contactId?: Maybe<Scalars['ID']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  forwardId?: Maybe<Scalars['ID']['output']>;
  forwardMessage?: Maybe<Message>;
  id: Scalars['ID']['output'];
  image?: Maybe<Scalars['String']['output']>;
  imageUrl?: Maybe<Scalars['String']['output']>;
  joinRequest?: Maybe<JoinRequest>;
  joinRequestId?: Maybe<Scalars['ID']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  post?: Maybe<Post>;
  postId?: Maybe<Scalars['ID']['output']>;
  read: Scalars['Boolean']['output'];
  replyId?: Maybe<Scalars['ID']['output']>;
  replyMessage?: Maybe<Message>;
  scrim?: Maybe<Scrim>;
  scrimId?: Maybe<Scalars['ID']['output']>;
  system: Scalars['Boolean']['output'];
  team?: Maybe<Team>;
  teamId?: Maybe<Scalars['ID']['output']>;
  teamInvitation?: Maybe<TeamInvitation>;
  teamInvitationId?: Maybe<Scalars['ID']['output']>;
  text?: Maybe<Scalars['String']['output']>;
  user: User;
};

/** Message include counter */
export type MessageCount = {
  __typename?: 'MessageCount';
  chatroom: Chatroom;
  count: Scalars['Int']['output'];
  endReached: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  messages: Array<Message>;
};

/** Monthly Report */
export type MonthlyReport = {
  __typename?: 'MonthlyReport';
  cancelCount: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  gameAccount: GameAccount;
  id: Scalars['ID']['output'];
  matchCount?: Maybe<Scalars['Int']['output']>;
  month: Scalars['String']['output'];
  nextLevel?: Maybe<PilotLevel>;
  pilotLevel: PilotLevel;
  pilotRewards: Array<PilotReward>;
  rating: Scalars['Float']['output'];
  realtimeHours: Scalars['Float']['output'];
  respondTime?: Maybe<Scalars['Float']['output']>;
  scheduleCount: Scalars['Int']['output'];
  year: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Accept Join Request */
  acceptJoinRequest?: Maybe<AcceptJoinRequestPayload>;
  /** Accept Partnering Request */
  acceptPartneringRequest?: Maybe<AcceptPartneringRequestPayload>;
  /** Manager Accept Team Invitation */
  acceptTeamInvitation?: Maybe<AcceptTeamInvitationPayload>;
  /** Accepter Complete Combat Room */
  accepterCompleteCombatRoom?: Maybe<AccepterCompleteCombatRoomPayload>;
  /** Accepter Ready Combat Room */
  accepterReadyCombatRoom?: Maybe<AccepterReadyCombatRoomPayload>;
  /** Add referrer */
  addReferrer?: Maybe<AddReferrerPayload>;
  /** Manager add team */
  addTeam?: Maybe<AddTeamPayload>;
  /** Sign In or Up */
  authorization?: Maybe<AuthorizationPayload>;
  /** Block Specified Users */
  blockUser?: Maybe<BlockUserPayload>;
  /** User Cancel Booking */
  cancelBooking?: Maybe<CancelBookingPayload>;
  /** Cancel Combat Room */
  cancelCombatQueue?: Maybe<CancelCombatQueuePayload>;
  /** Cancel Combat Room */
  cancelCombatRoom?: Maybe<CancelCombatRoomPayload>;
  /** Register Combat Team */
  cancelCombatTeam?: Maybe<CancelCombatTeamPayload>;
  /** Create Join Request */
  cancelJoinRequest?: Maybe<CancelJoinRequestPayload>;
  /** Cancel Matched Partnering Request */
  cancelMatched?: Maybe<CancelMatchedPayload>;
  /** Cancel Partnering Request */
  cancelPartneringRequest?: Maybe<CancelPartneringRequestPayload>;
  /** Cancel Pilot Service */
  cancelPilotService?: Maybe<CancelPilotServicePayload>;
  /** Cancel Scrim */
  cancelScrim?: Maybe<CancelScrimPayload>;
  /** Manager Cancel Team Invitation */
  cancelTeamInvitation?: Maybe<CancelTeamInvitationPayload>;
  /** Owner Cancel Tournament */
  cancelTournament?: Maybe<CancelTournamentPayload>;
  /** Owner Cancel Tournament Room */
  cancelTournamentRoom?: Maybe<CancelTournamentRoomPayload>;
  /** Cancel tournament team */
  cancelTournamentTeam?: Maybe<CancelTournamentTeamPayload>;
  /** User create tournament user */
  cancelTournamentUser?: Maybe<CancelTournamentUserPayload>;
  /** Challenger Complete Combat Room */
  challengerCompleteCombatRoom?: Maybe<ChallengerCompleteCombatRoomPayload>;
  /** Challenger Ready Combat Room */
  challengerReadyCombatRoom?: Maybe<ChallengerReadyCombatRoomPayload>;
  /** Check private chatroom */
  checkChatroom?: Maybe<CheckChatroomPayload>;
  /** update tournament team */
  checkInTournamentRoom?: Maybe<CheckInTournamentRoomPayload>;
  /** Manager check pilot with nickname */
  checkPilot?: Maybe<CheckPilotPayload>;
  /** Checkout Cart */
  checkoutCart?: Maybe<CheckoutCartPayload>;
  /** Pilot choose rewards */
  choosePilotReward?: Maybe<ChoosePilotRewardPayload>;
  /** Comment Post */
  commentPost?: Maybe<CommentPostPayload>;
  /** Owner Complete Booking */
  completeBooking?: Maybe<CompleteBookingPayload>;
  /** Complete Combat Room */
  completeCombatRoom?: Maybe<CompleteCombatRoomPayload>;
  /** Complete GameBundle */
  completeGameBundle?: Maybe<CompletePayload>;
  /** Complete Partnering Request */
  completePartneringRequest?: Maybe<CompletePartneringRequestPayload>;
  /** Complete Scrim */
  completeScrim?: Maybe<CompleteScrimPayload>;
  /** Owner Complete Tournament */
  completeTournament?: Maybe<CompleteTournamentPayload>;
  /** Owner Complete Tournament Event */
  completeTournamentEvent?: Maybe<CompleteTournamentEventPayload>;
  /** Owner Complete Tournament Room */
  completeTournamentRoom?: Maybe<CompleteTournamentRoomPayload>;
  /** Owner confirm complete battle */
  confirmCompleteBattle?: Maybe<ConfirmCompleteBattlePayload>;
  /** User Confirm Complete Booking */
  confirmCompleteBooking?: Maybe<ConfirmCompleteBookingPayload>;
  /** Confirm Complete Combat Room */
  confirmCompleteCombatRoom?: Maybe<ConfirmCompleteCombatRoomPayload>;
  /** Confirm Completion Game Bundle */
  confirmCompletionGameBundle?: Maybe<ConfirmCompletionPayload>;
  /** Confirm Complete Scrim */
  confirmCompletionScrim?: Maybe<ConfirmCompletionScrimPayload>;
  /** Confirm Email OTP */
  confirmEmail?: Maybe<ConfirmEmailPayload>;
  /** Confirm Start Scrim */
  confirmStartScrim?: Maybe<ConfirmStartScrimPayload>;
  /** Create Ad Click */
  createAdClick?: Maybe<CreateAdClickPayload>;
  /** User create booking */
  createBooking?: Maybe<CreateBookingPayload>;
  /** Create private chatroom */
  createChatroom?: Maybe<CreateChatroomPayload>;
  /** User create clan */
  createClan?: Maybe<CreateClanPayload>;
  /** Create Club */
  createClub?: Maybe<CreateClubPayload>;
  /** Create Combat Room */
  createCombatQueue?: Maybe<CreateCombatQueuePayload>;
  /** Create Combat Room */
  createCombatRoom?: Maybe<CreateCombatRoomPayload>;
  /** Create Game Bundle */
  createGameBundle?: Maybe<CreatePayload>;
  /** Send Game Message */
  createGameMessage?: Maybe<CreateGameMessagePayload>;
  /** Create Join Request */
  createJoinRequest?: Maybe<CreateJoinRequestPayload>;
  /** Owner create match making */
  createMatchMaking?: Maybe<CreateMatchMakingPayload>;
  /** Create Order */
  createOrder?: Maybe<CreateOrderPayload>;
  /** Create Partnering Request */
  createPartneringRequest?: Maybe<CreatePartneringRequestPayload>;
  /** User Create Pool Prize for owned tournaments */
  createPoolPrize?: Maybe<CreatePoolPrizePayload>;
  /** Create Post */
  createPost?: Maybe<CreatePostPayload>;
  /** Create Reach  */
  createReach?: Maybe<CreateReachPayload>;
  /** Create Scrim */
  createScrim?: Maybe<CreateScrimPayload>;
  /** Create Shipping Address */
  createShippingAddress?: Maybe<CreateShippingAddressPayload>;
  /** Create Suspend Gamer Request */
  createSuspendGamerRequest?: Maybe<CreateSuspendGamerRequestPayload>;
  /** Manager Create Team */
  createTeam?: Maybe<CreateTeamPayload>;
  /** Create Team Club */
  createTeamClub?: Maybe<CreateTeamClubPayload>;
  /** Manager Create Team Invitation */
  createTeamInvitation?: Maybe<CreateTeamInvitationPayload>;
  /** Owner Create Tournament */
  createTournament?: Maybe<CreateTournamentPayload>;
  /** Owner create tournament event */
  createTournamentEvent?: Maybe<CreateTournamentEventPayload>;
  /** Owner Create Tournament Room */
  createTournamentRoom?: Maybe<CreateTournamentRoomPayload>;
  /** Owner create tournament setting */
  createTournamentSetting?: Maybe<CreateTournamentSettingPayload>;
  /** create tournament team */
  createTournamentTeam?: Maybe<CreateTournamentTeamPayload>;
  /** User create tournament user */
  createTournamentUser?: Maybe<CreateTournamentUserPayload>;
  /** Manager Delete Team */
  deleteTeam?: Maybe<DeleteTeamPayload>;
  /** Update Order */
  editOrder?: Maybe<UpdateOrderPayload>;
  /** Cancel Game Bundle */
  expireGameBundle?: Maybe<ExpireGameBundlePayload>;
  /** Extend Partnering Request */
  extendPartneringRequest?: Maybe<ExtendPartneringRequestPayload>;
  /** User follow or unfollow an item */
  follow?: Maybe<FollowPayload>;
  /** Forget Password */
  forgetPassword?: Maybe<ForgetPasswordPayload>;
  /** Gamer start GameBundle */
  gamerStartGameBundle?: Maybe<GamerStartPayload>;
  /** Gamer start Partnering Request */
  gamerStartPartneringRequest?: Maybe<GamerStartPartneringRequestPayload>;
  /** Create Combat Room */
  grabCombatRoom?: Maybe<GrabCombatRoomPayload>;
  /** Grab Game Bundle */
  grabGameBundle?: Maybe<GrabPayload>;
  /** Grab Partnering Request */
  grabPartneringRequest?: Maybe<GrabPartneringRequestPayload>;
  /** Grab Scrim */
  grabScrim?: Maybe<GrabScrimPayload>;
  /** User join or leave a clan */
  joinClan?: Maybe<JoinClanPayload>;
  /** Kick Team Combat Room */
  kickTeamCombatRoom?: Maybe<KickTeamCombatRoomPayload>;
  /** Leave Combat Room */
  leaveCombatRoom?: Maybe<LeaveCombatRoomPayload>;
  /** User like or unlike an item */
  like?: Maybe<LikePayload>;
  /** User open chatroom */
  openChatroom?: Maybe<OpenChatroomPayload>;
  /** Pilot Claim Rewards as Credit */
  pilotClaimRewardAsCredit?: Maybe<ClaimRewardAsCreditPayload>;
  /** Pilot complete Partnering Request */
  pilotCompletePartneringRequest?: Maybe<PilotCompletePartneringRequestPayload>;
  /** Pilot Review Partnering Request */
  pilotReviewPartneringRequest?: Maybe<PilotReviewPartneringRequestPayload>;
  /** Pilot start GameBundle */
  pilotStart?: Maybe<PilotStartPayload>;
  /** Pilot start Partnering Request */
  pilotStartPartneringRequest?: Maybe<PilotStartPartneringRequestPayload>;
  /** Preview Game Bundle Amount */
  previewGameBundleAmount?: Maybe<PreviewAmountPayload>;
  /** Preview Partnering Request Amount */
  previewPartneringRequestAmount?: Maybe<PreviewPartneringAmountPayload>;
  /** Total Spin Quantity */
  previewSpinAmount?: Maybe<PreviewSpinAmountPayload>;
  /** Qualify tournament user */
  qualifyTournamentUser?: Maybe<QualifyTournamentUserPayload>;
  /** Owner Cancel Tournament Room */
  randomTournamentRoom?: Maybe<RandomTournamentRoomPayload>;
  /** User Create Booking */
  rateBooking?: Maybe<RateBookingPayload>;
  /** Rate Game Bundle */
  rateGameBundle?: Maybe<RateGameBundlePayload>;
  /** Rate Partnering Request */
  ratePartneringRequest?: Maybe<RatePartneringRequestPayload>;
  /** Top Up Razer */
  razerTopUp?: Maybe<RazerTopUpPayload>;
  /** Read Message */
  readMessage?: Maybe<ReadMessagePayload>;
  /** Read Notification */
  readNotification?: Maybe<ReadNotificationPayload>;
  /** Readied Pilot Service */
  readiedPilotService?: Maybe<ReadiedPilotServicePayload>;
  /** Ready Combat Room */
  readyCombatRoom?: Maybe<ReadyCombatRoomPayload>;
  /** Register Combat Team */
  registerCombatTeam?: Maybe<RegisterCombatTeamPayload>;
  /** Reject Join Request */
  rejectJoinRequest?: Maybe<RejectJoinRequestPayload>;
  /** Reject Partnering Request */
  rejectPartneringRequest?: Maybe<RejectPartneringRequestPayload>;
  /** Manager Reject Team Invitation */
  rejectTeamInvitation?: Maybe<RejectTeamInvitationPayload>;
  /** Remove Firebase Registration Id */
  removeFirebaseRegistrationId?: Maybe<RemoveRegistrationIdPayload>;
  /** Remove Order */
  removeOrder?: Maybe<RemoveOrderPayload>;
  /** Remove Post */
  removePost?: Maybe<RemovePostPayload>;
  /** Remove Shipping Address */
  removeShippingAddress?: Maybe<RemoveShippingAddressPayload>;
  /** Remove team member */
  removeTeamMember?: Maybe<RemoveTeamMemberPayload>;
  /** Owner remove tournament event */
  removeTournamentEvent?: Maybe<RemoveTournamentEventPayload>;
  /** Owner Report Booking */
  reportBooking?: Maybe<ReportBookingPayload>;
  /** Report Combat Room */
  reportCombatRoom?: Maybe<ReportCombatRoomPayload>;
  /** Report GameBundle */
  reportGameBundle?: Maybe<ReportGameBundlePayload>;
  /** Report Partnering Request */
  reportPartneringRequest?: Maybe<ReportPartneringRequestPayload>;
  /** Report Post */
  reportPost?: Maybe<ReportPostPayload>;
  /** Request Payout Transaction */
  requestPayoutTransaction?: Maybe<RequestPayload>;
  /** Request Code */
  requestPhoneCode?: Maybe<RequestCodePayload>;
  /** Request Team Payout Transaction */
  requestTeamPayoutTransaction?: Maybe<TeamPayoutRequestPayload>;
  /** Create Gift Record */
  sendGift?: Maybe<SendGiftPayload>;
  /** Send Message */
  sendMessage?: Maybe<SendMessagePayload>;
  /** User send warning push notification */
  sendWarning?: Maybe<SendWarningPayload>;
  /** Set Online or Offline */
  setOnline?: Maybe<SetOnlinePayload>;
  /** Manager Set Role Player */
  setRolePlayer?: Maybe<SetRolePlayerPayload>;
  /** User set online */
  setUserOnline?: Maybe<SetUserOnlinePayload>;
  /** Owner start battle */
  startBattle?: Maybe<StartBattlePayload>;
  /** User Start Booking */
  startBooking?: Maybe<StartBookingPayload>;
  /** Pilot start GameBundle */
  startGameBundle?: Maybe<StartPayload>;
  /** Pilot start Partnering Request */
  startPartneringRequest?: Maybe<StartPartneringRequestPayload>;
  /** Start Scrim */
  startScrim?: Maybe<StartScrimPayload>;
  /** Owner Start Tournament */
  startTournament?: Maybe<StartTournamentPayload>;
  /** Owner start tournament event */
  startTournamentEvent?: Maybe<StartTournamentEventPayload>;
  /** Owner Start Tournament Room */
  startTournamentRoom?: Maybe<StartTournamentRoomPayload>;
  /** Submit Bank Info */
  submitBankInfo?: Maybe<SubmitInfoPayload>;
  /** Submit Game Account Verification Code */
  submitGameAccountCode?: Maybe<SubmitCodePayload>;
  /** Submit Game Account Data */
  submitGameAccountData?: Maybe<SubmitDataPayload>;
  /** Submit Online Schedules */
  submitOnlineSchedules?: Maybe<SubmitOnlineSchedulesPayload>;
  /** Submit Proficient Heros */
  submitProficientHeros?: Maybe<SubmitProficientHerosPayload>;
  /** Submit Proficient Roles */
  submitProficientRoles?: Maybe<SubmitProficientRolesPayload>;
  /** Submit Rank Pairing */
  submitRankPairing?: Maybe<SubmitRankPairingPayload>;
  /** Submit Rank Point */
  submitRankPoint?: Maybe<SubmitRankPointPayload>;
  /** Submit Team Bank Info */
  submitTeamBankInfo?: Maybe<SubmitTeamBankInfoPayload>;
  /** Suspend Pilot Service */
  suspendPilotService?: Maybe<SuspendPilotServicePayload>;
  /** Tixcart Purchase */
  tixcartePurchase?: Maybe<TixcartePurchasePayload>;
  /** Top Up Credit Card */
  topUp?: Maybe<TopUpPayload>;
  /** Checkout product */
  topupProductCheckout?: Maybe<TopupProductCheckoutPayload>;
  /** Inquiry product */
  topupProductInquiry?: Maybe<TopupProductInquiryPayload>;
  /** Owner qualify tournament team */
  tournamentTeam?: Maybe<TournamentTeamPayload>;
  /** Transfer Side Wallet */
  transferDeposit?: Maybe<TransferDepositPayload>;
  /** Unblock Specified Users */
  unblockUser?: Maybe<UnblockUserPayload>;
  /** Update Bank Info */
  updateBankInfo?: Maybe<UpdateInfoPayload>;
  /** User update clan */
  updateClan?: Maybe<UpdateClanPayload>;
  /** Update Club */
  updateClub?: Maybe<UpdateClubPayload>;
  /** Update Combat Room Url */
  updateCombatRoomUrl?: Maybe<UpdateCombatRoomUrlPayload>;
  /** Update Country Code */
  updateCountryCode?: Maybe<UpdateCountryCodePayload>;
  /** Update Discord Id */
  updateDiscordId?: Maybe<UpdateDiscordIdPayload>;
  /** Update Email */
  updateEmail?: Maybe<UpdateEmailPayload>;
  /** Update Firebase Registration Ids */
  updateFirebaseRegistrationIds?: Maybe<UpdateRegistrationIdsPayload>;
  /** Update Game Account Data */
  updateGameAccountData?: Maybe<UpdateDataPayload>;
  /** Update address */
  updateIpAddress?: Maybe<UpdateAddressPayload>;
  /** Owner update match making */
  updateMatchMaking?: Maybe<UpdateMatchMakingPayload>;
  /** Update Match Result */
  updateMatchResult?: Maybe<UpdateMatchResultPayload>;
  /** Update New Password */
  updatePassword?: Maybe<UpdatePasswordPayload>;
  /** Pilot update rewards */
  updatePilotReward?: Maybe<UpdatePilotRewardPayload>;
  /** Manager update player info */
  updatePlayerInfo?: Maybe<UpdatePlayerInfoPayload>;
  /** User update Pool Prize for owned tournaments */
  updatePoolPrize?: Maybe<UpdatePoolPrizePayload>;
  /** Update Post */
  updatePost?: Maybe<UpdatePostPayload>;
  /** Update Profile */
  updateProfile?: Maybe<UpdatePayload>;
  /** Update Screenshot */
  updateScreenshot?: Maybe<UpdateScreenshotPayload>;
  /** Update Security Code */
  updateSecurityCode?: Maybe<UpdateSecurityCodePayload>;
  /** Update Shipping Address */
  updateShippingAddress?: Maybe<UpdateShippingAddressPayload>;
  /** Owner update start time */
  updateStartTime?: Maybe<UpdateStartTimePayload>;
  /** Manager Update Team */
  updateTeam?: Maybe<UpdateTeamPayload>;
  /** Update Team Bank Info */
  updateTeamBankInfo?: Maybe<UpdateTeamBankInfoPayload>;
  /** User update team role online */
  updateTeamRoleOnline?: Maybe<UpdateTeamRoleOnlinePayload>;
  /** Owner Update Tournament */
  updateTournament?: Maybe<UpdateTournamentPayload>;
  /** Owner update tournament event */
  updateTournamentEvent?: Maybe<UpdateTournamentEventPayload>;
  /** Owner Update Tournament Room */
  updateTournamentRoom?: Maybe<UpdateTournamentRoomPayload>;
  /** Owner update tournament setting */
  updateTournamentSetting?: Maybe<UpdateTournamentSettingPayload>;
  /** update tournament team */
  updateTournamentTeam?: Maybe<UpdateTournamentTeamPayload>;
  /** Update user prize */
  updateUserPrize?: Maybe<UpdateUserPrizePayload>;
  /** Sign In or Up */
  userAuthorization?: Maybe<UserAuthorizationPayload>;
  /** User Password Login */
  userPasswordLogin?: Maybe<UserPasswordLoginPayload>;
  /** User Request Login Option */
  userRequestLogin?: Maybe<UserRequestLoginPayload>;
  /** Request Code */
  userRequestPhoneCode?: Maybe<UserRequestCodePayload>;
  /** User Request Login Option */
  userSocialAuthentication?: Maybe<UserSocialAuthenticationPayload>;
  /** User Submit Heros */
  userSubmitHeros?: Maybe<UserSubmitHerosPayload>;
  /** View Post */
  viewPost?: Maybe<ViewPostPayload>;
  /** Voca Checkout */
  vocaCheckout?: Maybe<VocaCheckoutPayload>;
  /** Voca Inquiry */
  vocaInquiry?: Maybe<VocaInquiryPayload>;
  /** Top Up Xendit */
  xenditTopUp?: Maybe<XenditTopUpPayload>;
};


export type MutationAcceptJoinRequestArgs = {
  input: AcceptJoinRequestInput;
};


export type MutationAcceptPartneringRequestArgs = {
  input: AcceptPartneringRequestInput;
};


export type MutationAcceptTeamInvitationArgs = {
  input: AcceptTeamInvitationInput;
};


export type MutationAccepterCompleteCombatRoomArgs = {
  input: AccepterCompleteCombatRoomInput;
};


export type MutationAccepterReadyCombatRoomArgs = {
  input: AccepterReadyCombatRoomInput;
};


export type MutationAddReferrerArgs = {
  input: AddReferrerInput;
};


export type MutationAddTeamArgs = {
  input: AddTeamInput;
};


export type MutationAuthorizationArgs = {
  input: AuthorizationInput;
};


export type MutationBlockUserArgs = {
  input: BlockUserInput;
};


export type MutationCancelBookingArgs = {
  input: CancelBookingInput;
};


export type MutationCancelCombatQueueArgs = {
  input: CancelCombatQueueInput;
};


export type MutationCancelCombatRoomArgs = {
  input: CancelCombatRoomInput;
};


export type MutationCancelCombatTeamArgs = {
  input: CancelCombatTeamInput;
};


export type MutationCancelJoinRequestArgs = {
  input: CancelJoinRequestInput;
};


export type MutationCancelMatchedArgs = {
  input: CancelPartneringRequestInput;
};


export type MutationCancelPartneringRequestArgs = {
  input: CancelPartneringRequestInput;
};


export type MutationCancelPilotServiceArgs = {
  input: CancelPilotServiceInput;
};


export type MutationCancelScrimArgs = {
  input: CancelScrimInput;
};


export type MutationCancelTeamInvitationArgs = {
  input: CancelTeamInvitationInput;
};


export type MutationCancelTournamentArgs = {
  input: CancelTournamentInput;
};


export type MutationCancelTournamentRoomArgs = {
  input: CancelTournamentRoomInput;
};


export type MutationCancelTournamentTeamArgs = {
  input: CancelTournamentTeamInput;
};


export type MutationCancelTournamentUserArgs = {
  input: CancelTournamentUserInput;
};


export type MutationChallengerCompleteCombatRoomArgs = {
  input: ChallengerCompleteCombatRoomInput;
};


export type MutationChallengerReadyCombatRoomArgs = {
  input: ChallengerReadyCombatRoomInput;
};


export type MutationCheckChatroomArgs = {
  input: CheckChatroomInput;
};


export type MutationCheckInTournamentRoomArgs = {
  input: CheckInTournamentRoomInput;
};


export type MutationCheckPilotArgs = {
  input: CheckPilotInput;
};


export type MutationCheckoutCartArgs = {
  input: CheckoutCartInput;
};


export type MutationChoosePilotRewardArgs = {
  input: ChoosePilotRewardInput;
};


export type MutationCommentPostArgs = {
  input: CommentPostInput;
};


export type MutationCompleteBookingArgs = {
  input: CompleteBookingInput;
};


export type MutationCompleteCombatRoomArgs = {
  input: CompleteCombatRoomInput;
};


export type MutationCompleteGameBundleArgs = {
  input: CompleteInput;
};


export type MutationCompletePartneringRequestArgs = {
  input: CompletePartneringRequestInput;
};


export type MutationCompleteScrimArgs = {
  input: CompleteScrimInput;
};


export type MutationCompleteTournamentArgs = {
  input: CompleteTournamentInput;
};


export type MutationCompleteTournamentEventArgs = {
  input: CompleteTournamentEventInput;
};


export type MutationCompleteTournamentRoomArgs = {
  input: CompleteTournamentRoomInput;
};


export type MutationConfirmCompleteBattleArgs = {
  input: ConfirmCompleteBattleInput;
};


export type MutationConfirmCompleteBookingArgs = {
  input: ConfirmCompleteBookingInput;
};


export type MutationConfirmCompleteCombatRoomArgs = {
  input: ConfirmCompleteCombatRoomInput;
};


export type MutationConfirmCompletionGameBundleArgs = {
  input: ConfirmCompletionInput;
};


export type MutationConfirmCompletionScrimArgs = {
  input: ConfirmCompletionScrimInput;
};


export type MutationConfirmEmailArgs = {
  input: ConfirmEmailInput;
};


export type MutationConfirmStartScrimArgs = {
  input: ConfirmStartScrimInput;
};


export type MutationCreateAdClickArgs = {
  input: CreateAdClickInput;
};


export type MutationCreateBookingArgs = {
  input: CreateBookingInput;
};


export type MutationCreateChatroomArgs = {
  input: CreateChatroomInput;
};


export type MutationCreateClanArgs = {
  input: CreateClanInput;
};


export type MutationCreateClubArgs = {
  input: CreateClubInput;
};


export type MutationCreateCombatQueueArgs = {
  input: CreateCombatQueueInput;
};


export type MutationCreateCombatRoomArgs = {
  input: CreateCombatRoomInput;
};


export type MutationCreateGameBundleArgs = {
  input: CreateInput;
};


export type MutationCreateGameMessageArgs = {
  input: CreateGameMessageInput;
};


export type MutationCreateJoinRequestArgs = {
  input: CreateJoinRequestInput;
};


export type MutationCreateMatchMakingArgs = {
  input: CreateMatchMakingInput;
};


export type MutationCreateOrderArgs = {
  input: CreateOrderInput;
};


export type MutationCreatePartneringRequestArgs = {
  input: CreatePartneringRequestInput;
};


export type MutationCreatePoolPrizeArgs = {
  input: CreatePoolPrizeInput;
};


export type MutationCreatePostArgs = {
  input: CreatePostInput;
};


export type MutationCreateReachArgs = {
  input: CreateReachInput;
};


export type MutationCreateScrimArgs = {
  input: CreateScrimInput;
};


export type MutationCreateShippingAddressArgs = {
  input: CreateShippingAddressInput;
};


export type MutationCreateTeamArgs = {
  input: CreateTeamInput;
};


export type MutationCreateTeamClubArgs = {
  input: CreateTeamClubInput;
};


export type MutationCreateTeamInvitationArgs = {
  input: CreateTeamInvitationInput;
};


export type MutationCreateTournamentArgs = {
  input: CreateTournamentInput;
};


export type MutationCreateTournamentEventArgs = {
  input: CreateTournamentEventInput;
};


export type MutationCreateTournamentRoomArgs = {
  input: CreateTournamentRoomInput;
};


export type MutationCreateTournamentSettingArgs = {
  input: CreateTournamentSettingInput;
};


export type MutationCreateTournamentTeamArgs = {
  input: CreateTournamentTeamInput;
};


export type MutationCreateTournamentUserArgs = {
  input: CreateTournamentUserInput;
};


export type MutationDeleteTeamArgs = {
  input: DeleteTeamInput;
};


export type MutationEditOrderArgs = {
  input: UpdateOrderInput;
};


export type MutationExpireGameBundleArgs = {
  input: ExpireGameBundleInput;
};


export type MutationExtendPartneringRequestArgs = {
  input: ExtendPartneringRequestInput;
};


export type MutationFollowArgs = {
  input: FollowInput;
};


export type MutationForgetPasswordArgs = {
  input: ForgetPasswordInput;
};


export type MutationGamerStartGameBundleArgs = {
  input: GamerStartInput;
};


export type MutationGamerStartPartneringRequestArgs = {
  input: GamerStartPartneringRequestInput;
};


export type MutationGrabCombatRoomArgs = {
  input: GrabCombatRoomInput;
};


export type MutationGrabGameBundleArgs = {
  input: GrabInput;
};


export type MutationGrabPartneringRequestArgs = {
  input: GrabPartneringRequestInput;
};


export type MutationGrabScrimArgs = {
  input: GrabScrimInput;
};


export type MutationJoinClanArgs = {
  input: JoinClanInput;
};


export type MutationKickTeamCombatRoomArgs = {
  input: KickTeamCombatRoomInput;
};


export type MutationLeaveCombatRoomArgs = {
  input: LeaveCombatRoomInput;
};


export type MutationLikeArgs = {
  input: LikeInput;
};


export type MutationOpenChatroomArgs = {
  input: OpenChatroomInput;
};


export type MutationPilotClaimRewardAsCreditArgs = {
  input: ClaimRewardAsCreditInput;
};


export type MutationPilotCompletePartneringRequestArgs = {
  input: PilotCompletePartneringRequestInput;
};


export type MutationPilotReviewPartneringRequestArgs = {
  input: PilotReviewPartneringRequestInput;
};


export type MutationPilotStartArgs = {
  input: PilotStartInput;
};


export type MutationPilotStartPartneringRequestArgs = {
  input: PilotStartPartneringRequestInput;
};


export type MutationPreviewGameBundleAmountArgs = {
  input: PreviewAmountInput;
};


export type MutationPreviewPartneringRequestAmountArgs = {
  input: PreviewPartneringAmountInput;
};


export type MutationPreviewSpinAmountArgs = {
  input: PreviewSpinAmountInput;
};


export type MutationQualifyTournamentUserArgs = {
  input: QualifyTournamentUserInput;
};


export type MutationRandomTournamentRoomArgs = {
  input: RandomTournamentRoomInput;
};


export type MutationRateBookingArgs = {
  input: RateBookingInput;
};


export type MutationRateGameBundleArgs = {
  input: RateGameBundleInput;
};


export type MutationRatePartneringRequestArgs = {
  input: RatePartneringRequestInput;
};


export type MutationRazerTopUpArgs = {
  input: RazerTopUpInput;
};


export type MutationReadMessageArgs = {
  input: ReadMessageInput;
};


export type MutationReadNotificationArgs = {
  input: ReadNotificationInput;
};


export type MutationReadiedPilotServiceArgs = {
  input: ReadiedPilotServiceInput;
};


export type MutationReadyCombatRoomArgs = {
  input: ReadyCombatRoomInput;
};


export type MutationRegisterCombatTeamArgs = {
  input: RegisterCombatTeamInput;
};


export type MutationRejectJoinRequestArgs = {
  input: RejectJoinRequestInput;
};


export type MutationRejectPartneringRequestArgs = {
  input: RejectPartneringRequestInput;
};


export type MutationRejectTeamInvitationArgs = {
  input: RejectTeamInvitationInput;
};


export type MutationRemoveFirebaseRegistrationIdArgs = {
  input: RemoveRegistrationIdInput;
};


export type MutationRemoveOrderArgs = {
  input: RemoveOrderInput;
};


export type MutationRemovePostArgs = {
  input: RemovePostInput;
};


export type MutationRemoveShippingAddressArgs = {
  input: RemoveShippingAddressInput;
};


export type MutationRemoveTeamMemberArgs = {
  input: RemoveTeamMemberInput;
};


export type MutationRemoveTournamentEventArgs = {
  input: RemoveTournamentEventInput;
};


export type MutationReportBookingArgs = {
  input: ReportBookingInput;
};


export type MutationReportCombatRoomArgs = {
  input: ReportCombatRoomInput;
};


export type MutationReportGameBundleArgs = {
  input: ReportGameBundleInput;
};


export type MutationReportPartneringRequestArgs = {
  input: ReportPartneringRequestInput;
};


export type MutationReportPostArgs = {
  input: ReportPostInput;
};


export type MutationRequestPayoutTransactionArgs = {
  input: RequestInput;
};


export type MutationRequestPhoneCodeArgs = {
  input: RequestCodeInput;
};


export type MutationRequestTeamPayoutTransactionArgs = {
  input: TeamPayoutRequestInput;
};


export type MutationSendGiftArgs = {
  input: SendGiftInput;
};


export type MutationSendMessageArgs = {
  input: SendMessageInput;
};


export type MutationSendWarningArgs = {
  input: SendWarningInput;
};


export type MutationSetOnlineArgs = {
  input: SetOnlineInput;
};


export type MutationSetRolePlayerArgs = {
  input: SetRolePlayerInput;
};


export type MutationSetUserOnlineArgs = {
  input: SetUserOnlineInput;
};


export type MutationStartBattleArgs = {
  input: StartBattleInput;
};


export type MutationStartBookingArgs = {
  input: StartBookingInput;
};


export type MutationStartGameBundleArgs = {
  input: StartInput;
};


export type MutationStartPartneringRequestArgs = {
  input: StartPartneringRequestInput;
};


export type MutationStartScrimArgs = {
  input: StartScrimInput;
};


export type MutationStartTournamentArgs = {
  input: StartTournamentInput;
};


export type MutationStartTournamentEventArgs = {
  input: StartTournamentEventInput;
};


export type MutationStartTournamentRoomArgs = {
  input: StartTournamentRoomInput;
};


export type MutationSubmitBankInfoArgs = {
  input: SubmitInfoInput;
};


export type MutationSubmitGameAccountCodeArgs = {
  input: SubmitCodeInput;
};


export type MutationSubmitGameAccountDataArgs = {
  input: SubmitDataInput;
};


export type MutationSubmitOnlineSchedulesArgs = {
  input: SubmitOnlineSchedulesInput;
};


export type MutationSubmitProficientHerosArgs = {
  input: SubmitProficientHerosInput;
};


export type MutationSubmitProficientRolesArgs = {
  input: SubmitProficientRolesInput;
};


export type MutationSubmitRankPairingArgs = {
  input: SubmitRankPairingInput;
};


export type MutationSubmitRankPointArgs = {
  rankPoint: Scalars['Int']['input'];
};


export type MutationSubmitTeamBankInfoArgs = {
  input: SubmitTeamBankInfoInput;
};


export type MutationSuspendPilotServiceArgs = {
  input: SuspendPilotServiceInput;
};


export type MutationTopUpArgs = {
  input: TopUpInput;
};


export type MutationTopupProductCheckoutArgs = {
  input: TopupProductCheckoutInput;
};


export type MutationTopupProductInquiryArgs = {
  input: TopupProductInquiryInput;
};


export type MutationTournamentTeamArgs = {
  input: TournamentTeamInput;
};


export type MutationTransferDepositArgs = {
  input: TransferDepositInput;
};


export type MutationUnblockUserArgs = {
  input: UnblockUserInput;
};


export type MutationUpdateBankInfoArgs = {
  input: UpdateInfoInput;
};


export type MutationUpdateClanArgs = {
  input: UpdateClanInput;
};


export type MutationUpdateClubArgs = {
  input: UpdateClubInput;
};


export type MutationUpdateCombatRoomUrlArgs = {
  input: UpdateCombatRoomUrlInput;
};


export type MutationUpdateCountryCodeArgs = {
  input: UpdateCountryCodeInput;
};


export type MutationUpdateDiscordIdArgs = {
  input: UpdateDiscordIdInput;
};


export type MutationUpdateEmailArgs = {
  input: UpdateEmailInput;
};


export type MutationUpdateFirebaseRegistrationIdsArgs = {
  input: UpdateRegistrationIdsInput;
};


export type MutationUpdateGameAccountDataArgs = {
  input: UpdateDataInput;
};


export type MutationUpdateIpAddressArgs = {
  input: UpdateAddressInput;
};


export type MutationUpdateMatchMakingArgs = {
  input: UpdateMatchMakingInput;
};


export type MutationUpdateMatchResultArgs = {
  input: UpdateMatchResultInput;
};


export type MutationUpdatePasswordArgs = {
  input: UpdatePasswordInput;
};


export type MutationUpdatePilotRewardArgs = {
  input: UpdatePilotRewardInput;
};


export type MutationUpdatePlayerInfoArgs = {
  input: UpdatePlayerInfoInput;
};


export type MutationUpdatePoolPrizeArgs = {
  input: UpdatePoolPrizeInput;
};


export type MutationUpdatePostArgs = {
  input: UpdatePostInput;
};


export type MutationUpdateProfileArgs = {
  input: UpdateInput;
};


export type MutationUpdateScreenshotArgs = {
  input: UpdateScreenshotInput;
};


export type MutationUpdateSecurityCodeArgs = {
  confirmSecurityCode: Scalars['String']['input'];
  securityCode: Scalars['String']['input'];
};


export type MutationUpdateShippingAddressArgs = {
  input: UpdateShippingAddressInput;
};


export type MutationUpdateStartTimeArgs = {
  input: UpdateStartTimeInput;
};


export type MutationUpdateTeamArgs = {
  input: UpdateTeamInput;
};


export type MutationUpdateTeamBankInfoArgs = {
  input: UpdateTeamBankInfoInput;
};


export type MutationUpdateTeamRoleOnlineArgs = {
  input: UpdateTeamRoleOnlineInput;
};


export type MutationUpdateTournamentArgs = {
  input: UpdateTournamentInput;
};


export type MutationUpdateTournamentEventArgs = {
  input: UpdateTournamentEventInput;
};


export type MutationUpdateTournamentRoomArgs = {
  input: UpdateTournamentRoomInput;
};


export type MutationUpdateTournamentSettingArgs = {
  input: UpdateTournamentSettingInput;
};


export type MutationUpdateTournamentTeamArgs = {
  input: UpdateTournamentTeamInput;
};


export type MutationUpdateUserPrizeArgs = {
  input: UpdateUserPrizeInput;
};


export type MutationUserAuthorizationArgs = {
  input: UserAuthorizationInput;
};


export type MutationUserPasswordLoginArgs = {
  input: UserPasswordLoginInput;
};


export type MutationUserRequestLoginArgs = {
  input: UserRequestLoginInput;
};


export type MutationUserRequestPhoneCodeArgs = {
  input: UserRequestCodeInput;
};


export type MutationUserSocialAuthenticationArgs = {
  input: UserSocialAuthenticationInput;
};


export type MutationUserSubmitHerosArgs = {
  input: UserSubmitHerosInput;
};


export type MutationViewPostArgs = {
  input: ViewPostInput;
};


export type MutationVocaCheckoutArgs = {
  input: VocaCheckoutInput;
};


export type MutationVocaInquiryArgs = {
  input: VocaInquiryInput;
};


export type MutationXenditTopUpArgs = {
  input: XenditTopUpInput;
};

/** Notifications */
export type Notification = {
  __typename?: 'Notification';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  game?: Maybe<Game>;
  id: Scalars['ID']['output'];
  read: Scalars['Boolean']['output'];
  target: NotificationTarget;
  targetId: Scalars['ID']['output'];
  targetType?: Maybe<NotificationTargetString>;
};

export type NotificationTarget = GameBundle | PartneringRequest | SuspendRequest;

export enum NotificationTargetString {
  Announcement = 'Announcement',
  Clan = 'Clan',
  Club = 'Club',
  CombatRoom = 'CombatRoom',
  CreditTransaction = 'CreditTransaction',
  GameBundle = 'GameBundle',
  Message = 'Message',
  PartneringRequest = 'PartneringRequest',
  Pilot = 'Pilot',
  Post = 'Post',
  PostComment = 'PostComment',
  Scrim = 'Scrim',
  SuspendRequest = 'SuspendRequest',
  User = 'User'
}

/** Official Channel */
export type OfficialChannel = {
  __typename?: 'OfficialChannel';
  accountId?: Maybe<Scalars['String']['output']>;
  active: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  phoneNumber?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** Og Data */
export type OgData = {
  __typename?: 'OgData';
  image: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

/** Online Schedule */
export type OnlineSchedule = {
  __typename?: 'OnlineSchedule';
  dayType: Day;
  hours?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};

export type OpenChatroomInput = {
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of OpenChatroom */
export type OpenChatroomPayload = {
  __typename?: 'OpenChatroomPayload';
  chatroom?: Maybe<Chatroom>;
  errors?: Maybe<Array<Error>>;
};

/** Order */
export type Order = {
  __typename?: 'Order';
  amount: Scalars['Float']['output'];
  channel?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditTransaction?: Maybe<CreditTransaction>;
  currency?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  gameAccountId?: Maybe<Scalars['String']['output']>;
  gameName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  merchandiseVariant?: Maybe<MerchandiseVariant>;
  orderNumber?: Maybe<Scalars['String']['output']>;
  quantity: Scalars['Int']['output'];
  shippingAddress?: Maybe<ShippingAddress>;
  snNumber?: Maybe<Scalars['String']['output']>;
  status: OrderStatus;
  trackingNumber?: Maybe<Scalars['String']['output']>;
  trackingUrl?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
  zoneId?: Maybe<Scalars['String']['output']>;
};

export enum OrderStatus {
  Cancelled = 'cancelled',
  Completed = 'completed',
  Failed = 'failed',
  Paid = 'paid',
  Pending = 'pending',
  Refund = 'refund',
  Shipping = 'shipping',
  Succeeded = 'succeeded'
}

export enum OrderType {
  Deposit = 'deposit',
  Purchase = 'purchase',
  Topup = 'topup'
}

/** Pairable Game Account */
export type PairableGameAccount = {
  __typename?: 'PairableGameAccount';
  id: Scalars['ID']['output'];
  pairableGameRanks: Array<SimpleGameRank>;
};

/** Pairable Pilot */
export type PairablePilot = {
  __typename?: 'PairablePilot';
  acceptedPartneringRequests: Array<SimplePartneringRequest>;
  gameAccount?: Maybe<PairableGameAccount>;
  id: Scalars['ID']['output'];
  online: Scalars['Boolean']['output'];
};


/** Pairable Pilot */
export type PairablePilotGameAccountArgs = {
  gameId: Scalars['ID']['input'];
};

export enum PartnerRate {
  Normal = 'normal',
  Pro = 'pro'
}

/** Partnering Request */
export type PartneringRequest = {
  __typename?: 'PartneringRequest';
  adminNote?: Maybe<Scalars['String']['output']>;
  amount: Scalars['Float']['output'];
  cancellable?: Maybe<Scalars['Boolean']['output']>;
  chatroom?: Maybe<Chatroom>;
  commission: Scalars['Float']['output'];
  communicationRating?: Maybe<Scalars['Int']['output']>;
  completeTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  completionScreenshotUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency: Scalars['String']['output'];
  durationHour?: Maybe<Scalars['Float']['output']>;
  game: Game;
  gameRank: GameRank;
  id: Scalars['ID']['output'];
  inGamePilotsGameAccounts?: Maybe<Array<SimpleGameAccount>>;
  matchCount?: Maybe<Scalars['Int']['output']>;
  matchedServices?: Maybe<Array<PilotService>>;
  openMic?: Maybe<Scalars['Boolean']['output']>;
  originalAmount: Scalars['Float']['output'];
  paid: Scalars['Boolean']['output'];
  partnerRateType: PartnerRate;
  penaltyAmount: Scalars['Float']['output'];
  pendingServices?: Maybe<Array<PilotService>>;
  perspectives?: Maybe<Array<ProficientRole>>;
  pilot?: Maybe<SimpleUser>;
  pilotCount: Scalars['Int']['output'];
  pilotGameAccount?: Maybe<SimpleGameAccount>;
  pilotNicknames?: Maybe<Scalars['String']['output']>;
  pilotPrice: Scalars['Float']['output'];
  pilotReview?: Maybe<Scalars['String']['output']>;
  pilotServices?: Maybe<Array<PilotService>>;
  pilots?: Maybe<Array<SimpleUser>>;
  proficientLanes: Array<ProficientRole>;
  proficientRoles?: Maybe<Array<ProficientRole>>;
  promoApplied: Scalars['Boolean']['output'];
  promoCode?: Maybe<Scalars['String']['output']>;
  queues?: Maybe<Array<ProficientRole>>;
  rankPoint?: Maybe<Scalars['Int']['output']>;
  rankStar?: Maybe<Scalars['Int']['output']>;
  rankTier?: Maybe<Scalars['Int']['output']>;
  rating?: Maybe<Scalars['Int']['output']>;
  ratingRemark?: Maybe<Scalars['String']['output']>;
  readiedServices?: Maybe<Array<PilotService>>;
  reportReason?: Maybe<Scalars['String']['output']>;
  reporter?: Maybe<SimpleUser>;
  skillRating?: Maybe<Scalars['Int']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: PartneringRequestState;
  totalAmount: Scalars['Float']['output'];
  totalDurationInMinutes?: Maybe<Scalars['Float']['output']>;
  totalOriginalAmount: Scalars['Float']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: SimpleUser;
  userGameAccount?: Maybe<SimpleGameAccount>;
};

export enum PartneringRequestState {
  AllStarted = 'all_started',
  Available = 'available',
  Cancelled = 'cancelled',
  Completed = 'completed',
  ConfirmStarted = 'confirm_started',
  GamerStarted = 'gamer_started',
  Idled = 'idled',
  Ignored = 'ignored',
  Matched = 'matched',
  PaymentOnHold = 'payment_on_hold',
  Rated = 'rated',
  Refunded = 'refunded',
  Reported = 'reported',
  Reviewed = 'reviewed',
  Started = 'started'
}

/** Payout */
export type Payout = {
  __typename?: 'Payout';
  adminNote?: Maybe<Scalars['String']['output']>;
  amount: Scalars['Float']['output'];
  approve: Scalars['Boolean']['output'];
  bank: Scalars['String']['output'];
  bankAccountNo: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditWallet: CreditWallet;
  currency: Scalars['String']['output'];
  email: Scalars['String']['output'];
  ic: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  phone: Scalars['String']['output'];
  pilot: Pilot;
  recipient?: Maybe<Scalars['String']['output']>;
  rejectReason?: Maybe<Scalars['String']['output']>;
  state?: Maybe<PayoutState>;
};

export enum PayoutState {
  Pending = 'pending',
  Processing = 'processing',
  Rejected = 'rejected',
  TransactionFailed = 'transaction_failed',
  TransactionSuccess = 'transaction_success'
}

/** Pilot */
export type Pilot = {
  __typename?: 'Pilot';
  acceptedPartneringRequests: Array<PartneringRequest>;
  adminNote?: Maybe<Scalars['String']['output']>;
  aggregateRating: Scalars['Float']['output'];
  allReports: Array<MonthlyReport>;
  availableGameBundles: Array<GameBundle>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  averageRespondTime?: Maybe<Scalars['Int']['output']>;
  bankInfo?: Maybe<BankInfo>;
  beKol: Scalars['Boolean']['output'];
  bePro: Scalars['Boolean']['output'];
  beStar: Scalars['Boolean']['output'];
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  chatroom?: Maybe<Chatroom>;
  completeGameBundlesCount: Scalars['Int']['output'];
  completePartneringRequestsCount: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditWallet: CreditWallet;
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gameAccount?: Maybe<GameAccount>;
  gameAccounts: Array<GameAccount>;
  gameBundles: Array<GameBundle>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  language: Language;
  lastSignInAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  mlbbAccount?: Maybe<GameAccount>;
  nickname?: Maybe<Scalars['String']['output']>;
  notifications: Array<Notification>;
  ongoingPartneringRequests: Array<PartneringRequest>;
  ongoingPilotServices: Array<PartneringRequest>;
  online: Scalars['Boolean']['output'];
  partneringRequest?: Maybe<PartneringRequest>;
  partneringRequests: Array<PartneringRequest>;
  pendingPing?: Maybe<PartneringRequest>;
  pendingReward?: Maybe<PilotReward>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
  pilotAcceptedPartneringRequests: PilotPartneringRequestCount;
  pilotChatroom?: Maybe<Chatroom>;
  pilotCreditTransactions: PilotCreditTransactionCount;
  pilotGameBundles: PilotGameBundleCount;
  pilotRewards?: Maybe<Array<PilotReward>>;
  playerIdsProficientRoles?: Maybe<Array<ProficientRole>>;
  referralCode: Scalars['String']['output'];
  rewardsCount: Scalars['Int']['output'];
  signInCount: Scalars['Int']['output'];
  streamer: Scalars['Boolean']['output'];
  suspend: Scalars['Boolean']['output'];
  suspendRequests?: Maybe<Array<SuspendRequest>>;
  team?: Maybe<Team>;
  teamRole?: Maybe<TeamRole>;
  totalRaterCount?: Maybe<Scalars['Int']['output']>;
  trained: Scalars['Boolean']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  userGameAccounts: Array<UserGameAccount>;
  userIdApple?: Maybe<Scalars['String']['output']>;
  userIdGoogle?: Maybe<Scalars['String']['output']>;
  userIdInstagram?: Maybe<Scalars['String']['output']>;
  userIdTiktok?: Maybe<Scalars['String']['output']>;
  verified: Scalars['Boolean']['output'];
};


/** Pilot */
export type PilotAvailableGameBundlesArgs = {
  gameId?: InputMaybe<Scalars['ID']['input']>;
};


/** Pilot */
export type PilotChatroomArgs = {
  id: Scalars['ID']['input'];
};


/** Pilot */
export type PilotGameAccountArgs = {
  gameId: Scalars['ID']['input'];
};


/** Pilot */
export type PilotGameBundlesArgs = {
  states?: InputMaybe<Array<GameBundleState>>;
};


/** Pilot */
export type PilotNotificationsArgs = {
  gameId?: InputMaybe<Scalars['ID']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
};


/** Pilot */
export type PilotPartneringRequestArgs = {
  id: Scalars['ID']['input'];
};


/** Pilot */
export type PilotPilotAcceptedPartneringRequestsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};


/** Pilot */
export type PilotPilotChatroomArgs = {
  id: Scalars['ID']['input'];
};


/** Pilot */
export type PilotPilotCreditTransactionsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};


/** Pilot */
export type PilotPilotGameBundlesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};


/** Pilot */
export type PilotPilotRewardsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};

/** Pilot Banner */
export type PilotBanner = {
  __typename?: 'PilotBanner';
  active: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  endTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  poster: Scalars['Boolean']['output'];
  screen?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  title: Scalars['String']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type PilotCompletePartneringRequestInput = {
  completionScreenshot?: InputMaybe<Scalars['File']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of PilotCompletePartneringRequest */
export type PilotCompletePartneringRequestPayload = {
  __typename?: 'PilotCompletePartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Pilot Credit Transaction include counter */
export type PilotCreditTransactionCount = {
  __typename?: 'PilotCreditTransactionCount';
  count: Scalars['Int']['output'];
  data: Array<CreditTransaction>;
};

/** Pilot Game bundles include counter */
export type PilotGameBundleCount = {
  __typename?: 'PilotGameBundleCount';
  count: Scalars['Int']['output'];
  data: Array<GameBundle>;
};

/** Pilot Level */
export type PilotLevel = {
  __typename?: 'PilotLevel';
  commission: Scalars['Float']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  maxCancelCount: Scalars['Int']['output'];
  maxIdleCount: Scalars['Int']['output'];
  maxMicOffCount: Scalars['Int']['output'];
  maxRespondTime: Scalars['Float']['output'];
  minRating: Scalars['Float']['output'];
  minRealtimeCount: Scalars['Int']['output'];
  minRealtimeHour: Scalars['Float']['output'];
  minScheduleCount: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  rewardValue: Scalars['Int']['output'];
  rewards?: Maybe<Array<Reward>>;
};

/** Pilot Partnering Request include counter */
export type PilotPartneringRequestCount = {
  __typename?: 'PilotPartneringRequestCount';
  count: Scalars['Int']['output'];
  data: Array<PartneringRequest>;
};

export type PilotReviewPartneringRequestInput = {
  completionScreenshot?: InputMaybe<Scalars['File']['input']>;
  id: Scalars['ID']['input'];
  pilotReview?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of PilotReviewPartneringRequest */
export type PilotReviewPartneringRequestPayload = {
  __typename?: 'PilotReviewPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Pilot Reward */
export type PilotReward = {
  __typename?: 'PilotReward';
  address?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  fullName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  inGameId?: Maybe<Scalars['String']['output']>;
  inGameName?: Maybe<Scalars['String']['output']>;
  monthlyReport: MonthlyReport;
  pilot: Pilot;
  pilotLevel?: Maybe<PilotLevel>;
  remark?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Reward>;
  state: PilotRewardState;
};

export enum PilotRewardState {
  Cancelled = 'cancelled',
  Delivered = 'delivered',
  PendingInfo = 'pending_info',
  PendingReward = 'pending_reward',
  Processing = 'processing'
}

/** Pilot Service */
export type PilotService = {
  __typename?: 'PilotService';
  commission: Scalars['Float']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  partneringRequestId: Scalars['ID']['output'];
  pilot: SimpleUser;
  reason?: Maybe<Scalars['String']['output']>;
  state: PilotServiceState;
};

export enum PilotServiceState {
  Cancelled = 'cancelled',
  Completed = 'completed',
  Pending = 'pending',
  Readied = 'readied',
  Rejected = 'rejected'
}

export type PilotStartInput = {
  id: Scalars['ID']['input'];
};

export type PilotStartPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of PilotStartPartneringRequest */
export type PilotStartPartneringRequestPayload = {
  __typename?: 'PilotStartPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of PilotStart */
export type PilotStartPayload = {
  __typename?: 'PilotStartPayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

/** Pilot Tier */
export type PilotTier = {
  __typename?: 'PilotTier';
  aggregateRating: Scalars['Float']['output'];
  completeGameBundlesCount: Scalars['Int']['output'];
  completePartneringRequestsCount: Scalars['Int']['output'];
  game: Game;
  gameAccount?: Maybe<GameAccount>;
  gameAccounts: Array<GameAccount>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  pilots?: Maybe<Array<Pilot>>;
};


/** Pilot Tier */
export type PilotTierGameAccountArgs = {
  gameId: Scalars['ID']['input'];
};

/** Pool Prize */
export type PoolPrize = {
  __typename?: 'PoolPrize';
  amount?: Maybe<Scalars['Float']['output']>;
  combatTeam?: Maybe<CombatTeam>;
  countryCode?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  leaderboard?: Maybe<Leaderboard>;
  maximumTeamCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  ordering: Scalars['Int']['output'];
  template?: Maybe<Scalars['Boolean']['output']>;
  tournament?: Maybe<Tournament>;
  tournamentTeam?: Maybe<TournamentTeam>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Post */
export type Post = {
  __typename?: 'Post';
  active?: Maybe<Scalars['Boolean']['output']>;
  aspectRatio?: Maybe<Scalars['Float']['output']>;
  assetId?: Maybe<Scalars['ID']['output']>;
  author?: Maybe<User>;
  body?: Maybe<Scalars['String']['output']>;
  commentsCount: Scalars['Int']['output'];
  countryCode?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  favCount: Scalars['Int']['output'];
  faved: Scalars['Boolean']['output'];
  followed: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageRatio?: Maybe<Scalars['Float']['output']>;
  isYoutube?: Maybe<Scalars['Boolean']['output']>;
  likeCount: Scalars['Int']['output'];
  liked?: Maybe<Scalars['Boolean']['output']>;
  matchMaking?: Maybe<MatchMaking>;
  merchandises?: Maybe<Array<Merchandise>>;
  newsImage?: Maybe<Scalars['String']['output']>;
  ogData?: Maybe<OgData>;
  playbackId?: Maybe<Scalars['ID']['output']>;
  postComments?: Maybe<Array<PostComment>>;
  postImages?: Maybe<Array<Scalars['String']['output']>>;
  postType?: Maybe<Scalars['String']['output']>;
  postVideos?: Maybe<Array<Scalars['String']['output']>>;
  proTip?: Maybe<ProTip>;
  reportRequests: Array<ReportRequest>;
  reportRequestsCount?: Maybe<Scalars['Int']['output']>;
  reported: Scalars['Boolean']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  targetId?: Maybe<Scalars['ID']['output']>;
  targetType?: Maybe<Scalars['String']['output']>;
  text: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  topic?: Maybe<Topic>;
  uploadId?: Maybe<Scalars['ID']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  views?: Maybe<Scalars['Int']['output']>;
};

/** Post Comment */
export type PostComment = {
  __typename?: 'PostComment';
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  post: Post;
  postId: Scalars['ID']['output'];
  postTitle?: Maybe<Scalars['String']['output']>;
  user: User;
};

/** Post comments include counter */
export type PostCommentCount = {
  __typename?: 'PostCommentCount';
  comments: Array<PostComment>;
  count: Scalars['Int']['output'];
  endReached: Scalars['Boolean']['output'];
};

/** Game Bundle Preview Amount */
export type PreviewAmount = {
  __typename?: 'PreviewAmount';
  priceBreakdown?: Maybe<Array<PriceBreakdown>>;
  totalAmount: Scalars['Float']['output'];
};

export type PreviewAmountInput = {
  currentGameRankId: Scalars['ID']['input'];
  currentRankPoint?: InputMaybe<Scalars['Int']['input']>;
  currentRankStar?: InputMaybe<Scalars['Int']['input']>;
  currentRankTier?: InputMaybe<Scalars['Int']['input']>;
  gameId: Scalars['ID']['input'];
  promoCode?: InputMaybe<Scalars['String']['input']>;
  targetGameRankId: Scalars['ID']['input'];
  targetRankPoint?: InputMaybe<Scalars['Int']['input']>;
  targetRankStar?: InputMaybe<Scalars['Int']['input']>;
  targetRankTier?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of PreviewAmount */
export type PreviewAmountPayload = {
  __typename?: 'PreviewAmountPayload';
  amount?: Maybe<Scalars['Float']['output']>;
  errors?: Maybe<Array<Error>>;
  inCooldown: Scalars['Boolean']['output'];
  previewAmount?: Maybe<PreviewAmount>;
  promoCodeApply?: Maybe<PromoCodeApply>;
  unlockAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
};

export type PreviewPartneringAmountInput = {
  durationHour?: InputMaybe<Scalars['Int']['input']>;
  gameId: Scalars['ID']['input'];
  gameRankId: Scalars['ID']['input'];
  inGameName?: InputMaybe<Scalars['String']['input']>;
  matchCount: Scalars['Int']['input'];
  pilotCount: Scalars['Int']['input'];
  promoCode?: InputMaybe<Scalars['String']['input']>;
  rankPoint?: InputMaybe<Scalars['Int']['input']>;
  rankStar?: InputMaybe<Scalars['Int']['input']>;
  rankTier?: InputMaybe<Scalars['Int']['input']>;
  serverId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of PreviewPartneringAmount */
export type PreviewPartneringAmountPayload = {
  __typename?: 'PreviewPartneringAmountPayload';
  amount?: Maybe<Scalars['Float']['output']>;
  errors?: Maybe<Array<Error>>;
  inCooldown: Scalars['Boolean']['output'];
  originalAmount?: Maybe<Scalars['Float']['output']>;
  promoCodeApply?: Maybe<PromoCodeApply>;
  unlockAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
};

export type PreviewSpinAmountInput = {
  amount: Scalars['Float']['input'];
};

/** Autogenerated return type of PreviewSpinAmount */
export type PreviewSpinAmountPayload = {
  __typename?: 'PreviewSpinAmountPayload';
  errors?: Maybe<Array<Error>>;
  spinAmount: Scalars['Int']['output'];
};

/** Game Bundle Price Breakdown */
export type PriceBreakdown = {
  __typename?: 'PriceBreakdown';
  higherPoint?: Maybe<Scalars['Int']['output']>;
  higherRank: Scalars['String']['output'];
  higherStar?: Maybe<Scalars['Int']['output']>;
  higherTier: Scalars['Int']['output'];
  lowerPoint?: Maybe<Scalars['Int']['output']>;
  lowerRank: Scalars['String']['output'];
  lowerStar?: Maybe<Scalars['Int']['output']>;
  lowerTier: Scalars['Int']['output'];
  subTotal: Scalars['Float']['output'];
};

/** Prize */
export type Prize = {
  __typename?: 'Prize';
  active: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  icon: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  limit?: Maybe<Scalars['Int']['output']>;
  position: Scalars['Int']['output'];
  prizeName: Scalars['String']['output'];
  prizeType?: Maybe<PrizeType>;
  value: Scalars['Float']['output'];
};

export enum PrizeType {
  CustomJob = 'custom_job',
  EliteSkin = 'elite_skin',
  EpicSkin = 'epic_skin',
  FirstPrize = 'first_prize',
  GameCredit = 'game_credit',
  GameItem = 'game_item',
  GrandPrize = 'grand_prize',
  PromoCode = 'promo_code',
  SecondPrize = 'second_prize',
  ThirdPrize = 'third_prize',
  Tshirt = 'tshirt'
}

export type ProTip = {
  __typename?: 'ProTip';
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  prosOnly: Scalars['Boolean']['output'];
  text: Scalars['String']['output'];
  video: Scalars['String']['output'];
};

/** Proficient Hero */
export type ProficientHero = {
  __typename?: 'ProficientHero';
  game: Game;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  proficientRole: ProficientRole;
};

/** Proficient Role */
export type ProficientRole = {
  __typename?: 'ProficientRole';
  game: Game;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  kind?: Maybe<ProficientRoleKind>;
  name: Scalars['String']['output'];
  proficientHeros?: Maybe<Array<ProficientHero>>;
  selectedImageUrl?: Maybe<Scalars['String']['output']>;
};

export enum ProficientRoleKind {
  HeroRole = 'hero_role',
  Lane = 'lane',
  Perspective = 'perspective',
  Queue = 'queue'
}

/** Promo Code */
export type PromoCode = {
  __typename?: 'PromoCode';
  active: Scalars['Boolean']['output'];
  amount: Scalars['Int']['output'];
  availableFor: Scalars['String']['output'];
  code: Scalars['String']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  gameType: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  minimumAmount: Scalars['Int']['output'];
  prosOnly?: Maybe<Scalars['Boolean']['output']>;
  redeemLimit?: Maybe<Scalars['Int']['output']>;
  specifiedClub?: Maybe<Club>;
  specifiedTier?: Maybe<PilotTier>;
  userIds?: Maybe<Array<Scalars['String']['output']>>;
  validUntil?: Maybe<Scalars['ISO8601DateTime']['output']>;
  whitelistsOnly?: Maybe<Scalars['Boolean']['output']>;
};

/** Promo Code Apply */
export type PromoCodeApply = {
  __typename?: 'PromoCodeApply';
  amount?: Maybe<Scalars['Int']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** Publisher */
export type Publisher = {
  __typename?: 'Publisher';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type QualifyTournamentUserInput = {
  id: Scalars['ID']['input'];
  stateRequest: Scalars['String']['input'];
};

/** Autogenerated return type of QualifyTournamentUser */
export type QualifyTournamentUserPayload = {
  __typename?: 'QualifyTournamentUserPayload';
  errors?: Maybe<Array<Error>>;
  tournamentUser?: Maybe<TournamentUser>;
};

export type Query = {
  __typename?: 'Query';
  /** Get all active merchandises */
  activeMerchandises: Array<Merchandise>;
  /** Get all activity notifications from User ID */
  activityNotifications: Array<Notification>;
  allCreditTransactions: Array<CreditTransaction>;
  /** Get all qualified tournament teams */
  approvedTournamentTeams: Array<TournamentTeam>;
  /** Get all available gamers for team finder */
  availableGamers: Array<Pilot>;
  /** Get all available match_making jobs */
  availableMatchMakings: Array<MatchMaking>;
  /** Get all available real-time jobs */
  availablePartneringRequests: Array<PartneringRequest>;
  /** Get all available teams for team finder */
  availableTeams: Array<Team>;
  /** Get all sponsor ads */
  bannerAds: Array<SponsorAd>;
  /** Get a Battle with ID */
  battle: Battle;
  /** Get all Battle with tournament room ID */
  battles: Array<Battle>;
  /** Get all Block Users */
  blockUsers: Array<User>;
  /** Get a Booking with ID */
  booking: Booking;
  /** Get all booking jobs with user ID */
  bookings: Array<Booking>;
  /** Get all cai leaderboards */
  caiLeaderboards: Array<CaiLeaderboard>;
  /** Get camp */
  camp: Camp;
  /** Get camp players */
  campPlayer: CampPlayer;
  /** Get all camp players */
  campPlayers: Array<CampPlayer>;
  /** Get a Battle with ID */
  camps: Array<Camp>;
  /** Get a chatroom with ID */
  chatroom: Chatroom;
  checkLastPayment?: Maybe<CheckLastPayment>;
  checkPilot?: Maybe<CheckPilot>;
  checkSpins?: Maybe<CheckSpins>;
  /** Get a clan with ID */
  clan: Clan;
  /** Get all clans */
  clans: Array<Clan>;
  /** Get club with ID */
  club: Club;
  /** Get all available clubs */
  clubs: Array<Club>;
  /** Get a combat queue with ID */
  combatQueue: CombatQueue;
  /** Get a combat room with ID */
  combatRoom: CombatRoom;
  /** Get all combat rooms with states */
  combatRooms: Array<CombatRoom>;
  /** Get a combat team with ID */
  combatTeam: CombatTeam;
  /** Get all comments notifications from User ID */
  commentNotifications: Array<PostComment>;
  /** Get a credit transaction with ID */
  creditTransaction?: Maybe<CreditTransaction>;
  /** Get a credit wallet with ID */
  creditWallet?: Maybe<CreditWallet>;
  /** Get latest leaderboard */
  currentLeaderboard: Leaderboard;
  /** Get current user */
  currentUser: UserSession;
  /** Get all faqs */
  faqs: Array<Faq>;
  /** Get all clans */
  featuredClans: Array<Clan>;
  /** Get featured teams */
  featuredTeams: Array<Team>;
  /** Get featured users */
  featuredUsers: Array<User>;
  /** Get all finder numbers */
  finderNumbers: FinderNumber;
  /** Get all follow notifications from User ID */
  followNotifications: Array<Follow>;
  /** Get all followers */
  followers: Array<User>;
  /** Get all following users */
  followingUsers: Array<User>;
  /** Get a game with ID */
  game: Game;
  /** Get a game account with ID */
  gameAccount: GameAccount;
  /** Get a schedule job with ID */
  gameBundle: GameBundle;
  /** Get a game chatroom with game ID */
  gameChatroom: GameMessageCount;
  /** Get a user with ID */
  gamer: User;
  /** Get all banners for gamer app */
  gamerBanners: Array<Banner>;
  /** Get all posters for gamer app */
  gamerPosters: Array<Banner>;
  /** Get all games */
  games: Array<Game>;
  generalSearch: GeneralSearch;
  /** Get all liked users */
  getLikes: Array<User>;
  /** Get history leaderboard */
  historyLeaderboard: Array<CombatTeam>;
  /** Get chatrooms list with user ID */
  inbox: Array<Chatroom>;
  /** Search users with nickname */
  inboxSuggestion: Array<User>;
  /** Get all invites notifications from User ID */
  inviteNotifications: Array<TeamInvitation>;
  /** Get a join request with ID */
  joinRequest: JoinRequest;
  /** Get all join requests with team ID */
  joinRequests: Array<JoinRequest>;
  /** Get latest leaderboard */
  latestLeaderboard: Array<CombatTeam>;
  /** Get a leaderboard with ID */
  leaderboard: Leaderboard;
  /** Get all combat teams from a leaderboard */
  leaderboardTeams: Array<CombatTeam>;
  /** Get all leaderboards */
  leaderboards: Array<Leaderboard>;
  managerMe?: Maybe<Manager>;
  /** Get a Match Making with ID */
  matchMaking: MatchMaking;
  me?: Maybe<User>;
  /** Get all a merchandise with ID */
  merchandise: Merchandise;
  /** Get a chatroom message with message ID */
  message: Message;
  /** Get leaderboards of a month */
  monthLeaderboards: Array<Leaderboard>;
  /** Get a official channel by name */
  officialChannel: OfficialChannel;
  /** Get a all official channels */
  officialChannels: Array<OfficialChannel>;
  /** Get all online schedules */
  onlineSchedules: Array<OnlineSchedule>;
  /** Get an order with ID */
  order: Order;
  pairablePilotMe?: Maybe<PairablePilot>;
  /** Get a real-time job with ID */
  partneringRequest: PartneringRequest;
  /** Get all banners for partner app */
  pilotBanners: Array<PilotBanner>;
  /** Get a all pilot levels */
  pilotLevels: Array<PilotLevel>;
  pilotMe?: Maybe<Pilot>;
  /** Get all posters for partner app */
  pilotPosters: Array<PilotBanner>;
  /** Get a post with ID */
  post: Post;
  /** Get all comments from Post ID */
  postComments: PostCommentCount;
  /** Get all posts from with filters */
  posts: Array<Post>;
  /** Get a private chatroom with ID */
  privateChatroom: MessageCount;
  /** Get all prizes */
  prizes: Array<Prize>;
  /** Get purchase orders with status */
  purchaseOrders: Array<Order>;
  /** Get a rated schedule job with pilot ID */
  ratedGameBundles: Array<GameBundle>;
  /** Get all rated real-time jobs with partner ID */
  ratedPartneringRequests: Array<PartneringRequest>;
  /** Get remaining teams count for Kohai Championship */
  remainingTeams: Scalars['Int']['output'];
  /** Get a scrim with ID */
  scrim: Scrim;
  /** Get a shipping address with ID */
  shippingAddress: ShippingAddress;
  simplePilotMe?: Maybe<SimplePilot>;
  /** Get a team with ID */
  team: Team;
  /** Get a team invitation with ID */
  teamInvitation: TeamInvitation;
  /** Get all team invitations */
  teamInvitations: Array<TeamInvitation>;
  /** Get a team member with ID */
  teamMember: User;
  /** Get all team payouts with team wallet ID */
  teamPayouts: Array<TeamPayout>;
  /** Get a team role with ID */
  teamRole: TeamRole;
  /** Validate team name */
  teamValidator: Scalars['Boolean']['output'];
  /** Get a team wallet with ID */
  teamWallet: TeamWallet;
  /** Get a teams with Tournament event ID */
  teams: Array<Team>;
  /** Get a product by ID */
  topupProduct: TopupProduct;
  /** Get a product detail */
  topupProductDetail: TopupProductDetail;
  /** Get product item */
  topupProductItem: Array<TopupProductItem>;
  /** Get merchant balance */
  topupProductMerchantBalance: TopupProductMerchant;
  /** Get a list of product */
  topupProducts: Array<TopupProduct>;
  /** Get a tournament with ID */
  tournament: Tournament;
  /** Get a tournament event with ID */
  tournamentEvent: TournamentEvent;
  /** Get all tournament events */
  tournamentEvents: Array<TournamentEvent>;
  /** Get a tournament team with ID */
  tournamentRoom: TournamentRoom;
  /** Get all tournament rooms */
  tournamentRooms: Array<TournamentRoom>;
  /** Get a tournament team with ID */
  tournamentTeam: TournamentTeam;
  /** Get all tournament teams */
  tournamentTeamCount?: Maybe<TournamentTeamCount>;
  /** Get a tournament team with ID */
  tournamentTeamCsv?: Maybe<Scalars['String']['output']>;
  /** Get all tournament teams */
  tournamentTeams: Array<TournamentTeam>;
  /** Get all tournaments */
  tournaments: Array<Tournament>;
  /** Get unread notifications count from user ID */
  unreadNotifications: UnreadCount;
  /** Get mux upload url */
  uploadUrl?: Maybe<UploadUrl>;
  userActivity?: Maybe<Activity>;
  /** Get a user prize with ID */
  userPrize: UserPrize;
  /** Get aall user prizes with user ID */
  userPrizes: Array<UserPrize>;
  /** Get a user promo code with code and userid */
  userPromoCode?: Maybe<UserPromoCode>;
  /** Get all partnering requests from a user ID */
  userRealtimes: Array<PartneringRequest>;
  /** Get all game bundles from a user ID */
  userSchedules: Array<GameBundle>;
  /** Get all available users */
  users: Array<User>;
  /** Get a merchant */
  vocaMerchant: VocaMerchant;
  /** Get a list of product */
  vocaProduct: Array<VocaProduct>;
  /** Get detail product */
  vocaProductDetail: VocaProductDetail;
  /** Get product item */
  vocaProductItem: Array<VocaProductItem>;
};


export type QueryActiveMerchandisesArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  searchString?: InputMaybe<Scalars['String']['input']>;
};


export type QueryActivityNotificationsArgs = {
  offset: Scalars['Int']['input'];
  userId: Scalars['ID']['input'];
};


export type QueryAllCreditTransactionsArgs = {
  transactionType?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAvailableGamersArgs = {
  gameId: Scalars['ID']['input'];
  gameRanksId?: InputMaybe<Array<Scalars['ID']['input']>>;
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  proficientRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  searchString?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAvailableMatchMakingsArgs = {
  gameId?: InputMaybe<Scalars['ID']['input']>;
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
};


export type QueryAvailablePartneringRequestsArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
};


export type QueryAvailableTeamsArgs = {
  country?: InputMaybe<Country>;
  gameId: Scalars['ID']['input'];
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  searchString?: InputMaybe<Scalars['String']['input']>;
  teamMemberCount?: InputMaybe<Scalars['Int']['input']>;
  teamRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  tier?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBattleArgs = {
  id: Scalars['ID']['input'];
};


export type QueryBattlesArgs = {
  state?: InputMaybe<BattleState>;
  tournamentRoomId: Scalars['ID']['input'];
};


export type QueryBlockUsersArgs = {
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['ID']['input'];
};


export type QueryBookingArgs = {
  id: Scalars['ID']['input'];
};


export type QueryBookingsArgs = {
  limit: Scalars['Int']['input'];
  matchMakingId: Scalars['ID']['input'];
  offset: Scalars['Int']['input'];
  review?: InputMaybe<Scalars['Boolean']['input']>;
  states?: InputMaybe<Array<BookingState>>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCaiLeaderboardsArgs = {
  fromDate: Scalars['ISO8601DateTime']['input'];
  toDate: Scalars['ISO8601DateTime']['input'];
};


export type QueryCampArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCampPlayerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCampPlayersArgs = {
  campId: Scalars['ID']['input'];
};


export type QueryCampsArgs = {
  battleId: Scalars['ID']['input'];
};


export type QueryChatroomArgs = {
  id: Scalars['ID']['input'];
};


export type QueryClanArgs = {
  id: Scalars['ID']['input'];
};


export type QueryClansArgs = {
  clubId?: InputMaybe<Scalars['ID']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryClubArgs = {
  id: Scalars['ID']['input'];
};


export type QueryClubsArgs = {
  gameId?: InputMaybe<Scalars['ID']['input']>;
  offset: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
  tier?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCombatQueueArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCombatRoomArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCombatRoomsArgs = {
  offset: Scalars['Int']['input'];
  states: Array<CombatRoomState>;
};


export type QueryCombatTeamArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCommentNotificationsArgs = {
  offset: Scalars['Int']['input'];
  userId: Scalars['ID']['input'];
};


export type QueryCreditTransactionArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCreditWalletArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCurrentLeaderboardArgs = {
  userId: Scalars['ID']['input'];
};


export type QueryFaqsArgs = {
  categoryColumns: Array<CategoryColumns>;
  language: Language;
};


export type QueryFollowNotificationsArgs = {
  offset: Scalars['Int']['input'];
  userId: Scalars['ID']['input'];
};


export type QueryFollowersArgs = {
  id: Scalars['ID']['input'];
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFollowingUsersArgs = {
  id: Scalars['ID']['input'];
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGameArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGameAccountArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGameBundleArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGameChatroomArgs = {
  gameChatroomId: Scalars['ID']['input'];
  lastMessageId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryGamerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGamesArgs = {
  combat?: InputMaybe<Scalars['Boolean']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGeneralSearchArgs = {
  query: Scalars['String']['input'];
};


export type QueryGetLikesArgs = {
  id: Scalars['ID']['input'];
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHistoryLeaderboardArgs = {
  id: Scalars['ID']['input'];
  page: Scalars['Int']['input'];
};


export type QueryInboxArgs = {
  id: Scalars['ID']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryInviteNotificationsArgs = {
  offset: Scalars['Int']['input'];
  userId: Scalars['ID']['input'];
};


export type QueryJoinRequestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryJoinRequestsArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  teamId: Scalars['ID']['input'];
};


export type QueryLatestLeaderboardArgs = {
  page: Scalars['Int']['input'];
};


export type QueryLeaderboardArgs = {
  id: Scalars['ID']['input'];
};


export type QueryLeaderboardTeamsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryMatchMakingArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMerchandiseArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMessageArgs = {
  id: Scalars['ID']['input'];
};


export type QueryMonthLeaderboardsArgs = {
  month: Scalars['String']['input'];
  year?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOfficialChannelArgs = {
  name: Scalars['String']['input'];
};


export type QueryOrderArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPartneringRequestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPostArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostCommentsArgs = {
  offset: Scalars['Int']['input'];
  postId: Scalars['ID']['input'];
};


export type QueryPostsArgs = {
  clanId?: InputMaybe<Scalars['ID']['input']>;
  clubId?: InputMaybe<Scalars['ID']['input']>;
  countryCode?: InputMaybe<Scalars['String']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  page: Scalars['Int']['input'];
  postType?: Scalars['String']['input'];
  teamId?: InputMaybe<Scalars['ID']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryPrivateChatroomArgs = {
  id: Scalars['ID']['input'];
  lastMessageId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryPurchaseOrdersArgs = {
  state: OrderStatus;
};


export type QueryRatedGameBundlesArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRatedPartneringRequestsArgs = {
  id: Scalars['ID']['input'];
};


export type QueryScrimArgs = {
  id: Scalars['ID']['input'];
};


export type QueryShippingAddressArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamInvitationArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamInvitationsArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryTeamMemberArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamPayoutsArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  states: Array<TeamPayoutState>;
  teamWalletId: Scalars['ID']['input'];
};


export type QueryTeamRoleArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamValidatorArgs = {
  nickname: Scalars['String']['input'];
};


export type QueryTeamWalletArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTeamsArgs = {
  search?: InputMaybe<Scalars['String']['input']>;
  tournamentEventId: Scalars['ID']['input'];
  tournamentTeamState?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTopupProductArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTopupProductDetailArgs = {
  productId: Scalars['ID']['input'];
  vendor: Scalars['String']['input'];
};


export type QueryTopupProductItemArgs = {
  productItemId: Scalars['Int']['input'];
  vendor: Scalars['String']['input'];
};


export type QueryTopupProductMerchantBalanceArgs = {
  vendor: Scalars['String']['input'];
};


export type QueryTopupProductsArgs = {
  categoryId?: InputMaybe<Scalars['ID']['input']>;
  page: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTournamentArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTournamentEventArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTournamentEventsArgs = {
  state?: InputMaybe<TournamentEventState>;
  tournamentId: Scalars['ID']['input'];
};


export type QueryTournamentRoomArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTournamentRoomsArgs = {
  state?: InputMaybe<TournamentRoomState>;
  tournamentEventId: Scalars['ID']['input'];
};


export type QueryTournamentTeamArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTournamentTeamCountArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  tournamentId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryTournamentTeamCsvArgs = {
  tournamentId: Scalars['ID']['input'];
};


export type QueryTournamentTeamsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTournamentsArgs = {
  clanId?: InputMaybe<Scalars['ID']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  judgeId?: InputMaybe<Scalars['ID']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  organizerId?: InputMaybe<Scalars['ID']['input']>;
  states?: InputMaybe<Array<TournamentState>>;
};


export type QueryUnreadNotificationsArgs = {
  userId: Scalars['ID']['input'];
};


export type QueryUserPrizeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUserPrizesArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  states: Array<UserPrizeState>;
  userId: Scalars['ID']['input'];
};


export type QueryUserPromoCodeArgs = {
  code: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};


export type QueryUserRealtimesArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  states: Array<PartneringRequestState>;
  userId: Scalars['ID']['input'];
};


export type QueryUserSchedulesArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
  states: Array<GameBundleState>;
  userId: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  followers?: InputMaybe<Scalars['Boolean']['input']>;
  following?: InputMaybe<Scalars['Boolean']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryVocaProductArgs = {
  category?: InputMaybe<Scalars['String']['input']>;
  page: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
};


export type QueryVocaProductDetailArgs = {
  productId: Scalars['ID']['input'];
};


export type QueryVocaProductItemArgs = {
  productItemId: Scalars['ID']['input'];
};

export type RandomTournamentRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RandomTournamentRoom */
export type RandomTournamentRoomPayload = {
  __typename?: 'RandomTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type RateBookingInput = {
  id: Scalars['ID']['input'];
  rating: Scalars['Int']['input'];
  ratingRemark?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of RateBooking */
export type RateBookingPayload = {
  __typename?: 'RateBookingPayload';
  booking: Booking;
  errors?: Maybe<Array<Error>>;
};

export type RateGameBundleInput = {
  communicationRating?: InputMaybe<Scalars['Int']['input']>;
  id: Scalars['ID']['input'];
  openMic?: InputMaybe<Scalars['Boolean']['input']>;
  rating: Scalars['Int']['input'];
  ratingRemark?: InputMaybe<Scalars['String']['input']>;
  skillRating?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of RateGameBundle */
export type RateGameBundlePayload = {
  __typename?: 'RateGameBundlePayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type RatePartneringRequestInput = {
  communicationRating?: InputMaybe<Scalars['Int']['input']>;
  id: Scalars['ID']['input'];
  openMic?: InputMaybe<Scalars['Boolean']['input']>;
  rating: Scalars['Int']['input'];
  ratingRemark?: InputMaybe<Scalars['String']['input']>;
  skillRating?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of RatePartneringRequest */
export type RatePartneringRequestPayload = {
  __typename?: 'RatePartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type RazerTopUpInput = {
  amount: Scalars['Float']['input'];
  orderType?: InputMaybe<Array<OrderType>>;
};

/** Autogenerated return type of RazerTopUp */
export type RazerTopUpPayload = {
  __typename?: 'RazerTopUpPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']['output']>;
  skey?: Maybe<Scalars['String']['output']>;
  vcode?: Maybe<Scalars['String']['output']>;
};

export type ReadMessageInput = {
  chatroomId: Scalars['ID']['input'];
};

/** Autogenerated return type of ReadMessage */
export type ReadMessagePayload = {
  __typename?: 'ReadMessagePayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type ReadNotificationInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ReadNotification */
export type ReadNotificationPayload = {
  __typename?: 'ReadNotificationPayload';
  errors?: Maybe<Array<Error>>;
  notification?: Maybe<Notification>;
};

export type ReadiedPilotServiceInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ReadiedPilotService */
export type ReadiedPilotServicePayload = {
  __typename?: 'ReadiedPilotServicePayload';
  errors?: Maybe<Array<Error>>;
  pilotService?: Maybe<PilotService>;
};

export type ReadyCombatRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ReadyCombatRoom */
export type ReadyCombatRoomPayload = {
  __typename?: 'ReadyCombatRoomPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Referrer */
export type Referrer = {
  __typename?: 'Referrer';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  nickname?: Maybe<Scalars['String']['output']>;
  phoneNumber: Scalars['String']['output'];
};

export type RegisterCombatTeamInput = {
  leaderboardId: Scalars['ID']['input'];
  teamId: Scalars['ID']['input'];
};

/** Autogenerated return type of RegisterCombatTeam */
export type RegisterCombatTeamPayload = {
  __typename?: 'RegisterCombatTeamPayload';
  combatTeam?: Maybe<CombatTeam>;
  errors?: Maybe<Array<Error>>;
};

export type RejectJoinRequestInput = {
  id: Scalars['ID']['input'];
  rejectReason?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of RejectJoinRequest */
export type RejectJoinRequestPayload = {
  __typename?: 'RejectJoinRequestPayload';
  errors?: Maybe<Array<Error>>;
  joinRequest?: Maybe<JoinRequest>;
};

export type RejectPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RejectPartneringRequest */
export type RejectPartneringRequestPayload = {
  __typename?: 'RejectPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type RejectTeamInvitationInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RejectTeamInvitation */
export type RejectTeamInvitationPayload = {
  __typename?: 'RejectTeamInvitationPayload';
  errors?: Maybe<Array<Error>>;
  teamInvitation?: Maybe<TeamInvitation>;
};

export type RemoveOrderInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveOrder */
export type RemoveOrderPayload = {
  __typename?: 'RemoveOrderPayload';
  errors?: Maybe<Array<Error>>;
  order?: Maybe<Order>;
};

export type RemovePostInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePost */
export type RemovePostPayload = {
  __typename?: 'RemovePostPayload';
  errors?: Maybe<Array<Error>>;
  post?: Maybe<Post>;
};

export type RemoveRegistrationIdInput = {
  id?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of RemoveRegistrationId */
export type RemoveRegistrationIdPayload = {
  __typename?: 'RemoveRegistrationIdPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<SimpleUser>;
};

export type RemoveShippingAddressInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveShippingAddress */
export type RemoveShippingAddressPayload = {
  __typename?: 'RemoveShippingAddressPayload';
  errors?: Maybe<Array<Error>>;
  shippingAddress?: Maybe<ShippingAddress>;
};

export type RemoveTeamMemberInput = {
  teamId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveTeamMember */
export type RemoveTeamMemberPayload = {
  __typename?: 'RemoveTeamMemberPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type RemoveTournamentEventInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveTournamentEvent */
export type RemoveTournamentEventPayload = {
  __typename?: 'RemoveTournamentEventPayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean']['output'];
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type ReportBookingInput = {
  id: Scalars['ID']['input'];
  reportReason: Scalars['String']['input'];
};

/** Autogenerated return type of ReportBooking */
export type ReportBookingPayload = {
  __typename?: 'ReportBookingPayload';
  booking?: Maybe<Booking>;
  errors?: Maybe<Array<Error>>;
};

export type ReportCombatRoomInput = {
  adminNote?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ReportCombatRoom */
export type ReportCombatRoomPayload = {
  __typename?: 'ReportCombatRoomPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type ReportGameBundleInput = {
  id: Scalars['ID']['input'];
  reportReason: Scalars['String']['input'];
};

/** Autogenerated return type of ReportGameBundle */
export type ReportGameBundlePayload = {
  __typename?: 'ReportGameBundlePayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type ReportPartneringRequestInput = {
  id: Scalars['ID']['input'];
  reportReason: Scalars['String']['input'];
};

/** Autogenerated return type of ReportPartneringRequest */
export type ReportPartneringRequestPayload = {
  __typename?: 'ReportPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

export type ReportPostInput = {
  id: Scalars['ID']['input'];
  reason: Scalars['String']['input'];
};

/** Autogenerated return type of ReportPost */
export type ReportPostPayload = {
  __typename?: 'ReportPostPayload';
  errors?: Maybe<Array<Error>>;
  post?: Maybe<Post>;
};

/** Report Request */
export type ReportRequest = {
  __typename?: 'ReportRequest';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  post?: Maybe<Post>;
  reason: Scalars['String']['output'];
  state: ReportRequestState;
  targetId?: Maybe<Scalars['ID']['output']>;
  targetType?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export enum ReportRequestState {
  Approved = 'approved',
  Cancelled = 'cancelled',
  Pending = 'pending',
  Rejected = 'rejected'
}

export type RequestCodeInput = {
  phoneNumber: Scalars['String']['input'];
};

/** Autogenerated return type of RequestCode */
export type RequestCodePayload = {
  __typename?: 'RequestCodePayload';
  errors?: Maybe<Array<Error>>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
};

export type RequestInput = {
  amount: Scalars['Float']['input'];
  version?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of Request */
export type RequestPayload = {
  __typename?: 'RequestPayload';
  errors?: Maybe<Array<Error>>;
  payout?: Maybe<Payout>;
};

/** Reward */
export type Reward = {
  __typename?: 'Reward';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  pilotLevel: PilotLevel;
  rewardType: RewardType;
};

export enum RewardType {
  Cash = 'cash',
  GameCredit = 'game_credit',
  GameItem = 'game_item',
  PromoCode = 'promo_code'
}

export enum ScreenshotState {
  PendingScreenshotResubmission = 'pending_screenshot_resubmission',
  ScreenshotApproved = 'screenshot_approved',
  ScreenshotSubmitted = 'screenshot_submitted',
  ScreenshotUnverified = 'screenshot_unverified'
}

export type Scrim = {
  __typename?: 'Scrim';
  chatroom?: Maybe<Chatroom>;
  completeTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Float']['output']>;
  guest?: Maybe<Team>;
  guestPlayers: Array<Pilot>;
  host: Team;
  hostPlayers: Array<Pilot>;
  id: Scalars['ID']['output'];
  matchCount?: Maybe<Scalars['Int']['output']>;
  matchResults: Array<MatchResult>;
  realtime: Scalars['Boolean']['output'];
  roles: Array<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: ScrimState;
};

export enum ScrimState {
  Available = 'available',
  Cancelled = 'cancelled',
  Completed = 'completed',
  ConfirmCompleted = 'confirm_completed',
  ConfirmStarted = 'confirm_started',
  Grabbed = 'grabbed',
  Matched = 'matched',
  Reported = 'reported',
  Reviewed = 'reviewed',
  Started = 'started'
}

export type SendGiftInput = {
  count: Scalars['Int']['input'];
  id: Scalars['ID']['input'];
  targetId: Scalars['ID']['input'];
  targetType: Scalars['String']['input'];
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendGift */
export type SendGiftPayload = {
  __typename?: 'SendGiftPayload';
  errors?: Maybe<Array<Error>>;
  gift?: Maybe<Gift>;
};

export type SendMessageInput = {
  chatroomId: Scalars['ID']['input'];
  clanId?: InputMaybe<Scalars['ID']['input']>;
  contactId?: InputMaybe<Scalars['ID']['input']>;
  forwardId?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<Scalars['File']['input']>;
  joinRequestId?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
  postId?: InputMaybe<Scalars['ID']['input']>;
  replyId?: InputMaybe<Scalars['ID']['input']>;
  scrimId?: InputMaybe<Scalars['ID']['input']>;
  system?: InputMaybe<Scalars['Boolean']['input']>;
  teamId?: InputMaybe<Scalars['ID']['input']>;
  teamInvitationId?: InputMaybe<Scalars['ID']['input']>;
  text: Scalars['String']['input'];
};

/** Autogenerated return type of SendMessage */
export type SendMessagePayload = {
  __typename?: 'SendMessagePayload';
  errors?: Maybe<Array<Error>>;
  message?: Maybe<Message>;
};

export type SendWarningInput = {
  body: Scalars['String']['input'];
  title: Scalars['String']['input'];
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendWarning */
export type SendWarningPayload = {
  __typename?: 'SendWarningPayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean']['output'];
};

export type SetOnlineInput = {
  online: Scalars['Boolean']['input'];
  version?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SetOnline */
export type SetOnlinePayload = {
  __typename?: 'SetOnlinePayload';
  errors?: Maybe<Array<Error>>;
  pilot?: Maybe<Pilot>;
};

export type SetRolePlayerInput = {
  id: Scalars['ID']['input'];
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of SetRolePlayer */
export type SetRolePlayerPayload = {
  __typename?: 'SetRolePlayerPayload';
  errors?: Maybe<Array<Error>>;
  team: Team;
  teamRole?: Maybe<TeamRole>;
};

export type SetUserOnlineInput = {
  online: Scalars['Boolean']['input'];
};

/** Autogenerated return type of SetUserOnline */
export type SetUserOnlinePayload = {
  __typename?: 'SetUserOnlinePayload';
  errors?: Maybe<Array<Error>>;
  online?: Maybe<Scalars['Boolean']['output']>;
};

export type ShippingAddress = {
  __typename?: 'ShippingAddress';
  address1: Scalars['String']['output'];
  address2?: Maybe<Scalars['String']['output']>;
  addressName: Scalars['String']['output'];
  country: Scalars['String']['output'];
  defaultAddress: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  latitude?: Maybe<Scalars['String']['output']>;
  longitude?: Maybe<Scalars['String']['output']>;
  orders: Array<Order>;
  postalCode: Scalars['String']['output'];
  recipientName?: Maybe<Scalars['String']['output']>;
  recipientPhoneNumber?: Maybe<Scalars['String']['output']>;
  state: ShippingAddressState;
  town: Scalars['String']['output'];
  user: User;
};

export enum ShippingAddressState {
  Johor = 'Johor',
  Kedah = 'Kedah',
  Kelantan = 'Kelantan',
  /** Kuala Lumpur */
  KualaLumpur = 'Kuala_Lumpur',
  Labuan = 'Labuan',
  Melaka = 'Melaka',
  /** Negeri Sembilan */
  NegeriSembilan = 'Negeri_Sembilan',
  Pahang = 'Pahang',
  Penang = 'Penang',
  Perak = 'Perak',
  Perlis = 'Perlis',
  Putrajaya = 'Putrajaya',
  Sabah = 'Sabah',
  Sarawak = 'Sarawak',
  Selangor = 'Selangor',
  Terengganu = 'Terengganu'
}

/** Side Wallet */
export type SideWallet = {
  __typename?: 'SideWallet';
  amount: Scalars['Float']['output'];
  creditTransactions: Array<CreditTransaction>;
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  pilot: Pilot;
};

/** Simple Game */
export type SimpleGame = {
  __typename?: 'SimpleGame';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Simple Game Account */
export type SimpleGameAccount = {
  __typename?: 'SimpleGameAccount';
  accountId: Scalars['String']['output'];
  club?: Maybe<Club>;
  gameRank: SimpleGameRank;
  id: Scalars['ID']['output'];
  kd?: Maybe<Scalars['Float']['output']>;
  nickname: Scalars['String']['output'];
  proficientLanes?: Maybe<Array<ProficientRole>>;
  proficientRoles?: Maybe<Array<ProficientRole>>;
  rankPoint?: Maybe<Scalars['Int']['output']>;
  rankStar?: Maybe<Scalars['Int']['output']>;
  rankTier?: Maybe<Scalars['Int']['output']>;
  winRate?: Maybe<Scalars['Float']['output']>;
};

/** Simple Game Rank */
export type SimpleGameRank = {
  __typename?: 'SimpleGameRank';
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

/** Simple Partnering Request */
export type SimplePartneringRequest = {
  __typename?: 'SimplePartneringRequest';
  completeTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  game: SimpleGame;
  gameRank: SimpleGameRank;
  id: Scalars['ID']['output'];
  ratingRemark?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: PartneringRequestState;
  totalDurationInMinutes?: Maybe<Scalars['Float']['output']>;
};

/** Simple Pilot */
export type SimplePilot = {
  __typename?: 'SimplePilot';
  aggregateRating: Scalars['Float']['output'];
  avatarUrl?: Maybe<Scalars['String']['output']>;
  averageRespondTime?: Maybe<Scalars['Int']['output']>;
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  completeGameBundlesCount: Scalars['Int']['output'];
  completePartneringRequestsCount: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditBalance: Scalars['Float']['output'];
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  language: Language;
  lastSignInAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  online: Scalars['Boolean']['output'];
  phoneNumber?: Maybe<Scalars['String']['output']>;
  referralCode: Scalars['String']['output'];
  signInCount: Scalars['Int']['output'];
  totalRaterCount?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Simple User */
export type SimpleUser = {
  __typename?: 'SimpleUser';
  _id: Scalars['ID']['output'];
  aggregateRating?: Maybe<Scalars['Float']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  averageRespondTime?: Maybe<Scalars['Int']['output']>;
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  completeGameBundlesCount?: Maybe<Scalars['Int']['output']>;
  completePartneringRequestsCount?: Maybe<Scalars['Int']['output']>;
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  language: Language;
  mlbbAccount?: Maybe<GameAccount>;
  name?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
  suspend: Scalars['Boolean']['output'];
  suspendGamerRequests?: Maybe<Array<SuspendGamerRequest>>;
  totalRaterCount?: Maybe<Scalars['Int']['output']>;
  userPrizes?: Maybe<Array<UserPrize>>;
  verified: Scalars['Boolean']['output'];
};

/** Sponsor Ads */
export type SponsorAd = {
  __typename?: 'SponsorAd';
  active: Scalars['Boolean']['output'];
  adClicks?: Maybe<Array<AdClick>>;
  adClicksCount?: Maybe<Scalars['Int']['output']>;
  adsName: Scalars['String']['output'];
  assetType: SponsorAdAsset;
  createdAt: Scalars['ISO8601DateTime']['output'];
  gamerBanner?: Maybe<GamerBanner>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  layoutType: SponsorAdLayout;
  position: Scalars['Int']['output'];
  reaches?: Maybe<Array<User>>;
  reachesCount?: Maybe<Scalars['Int']['output']>;
  screenRoute?: Maybe<Scalars['String']['output']>;
  sponsorName: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url: Scalars['String']['output'];
  videoUrl?: Maybe<Scalars['String']['output']>;
};

export enum SponsorAdAsset {
  Image = 'image',
  Video = 'video'
}

export enum SponsorAdLayout {
  Banner = 'banner',
  Poster = 'poster'
}

export type StartBattleInput = {
  id: Scalars['ID']['input'];
  tournamentRoomId: Scalars['ID']['input'];
};

/** Autogenerated return type of StartBattle */
export type StartBattlePayload = {
  __typename?: 'StartBattlePayload';
  battle?: Maybe<Battle>;
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type StartBookingInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartBooking */
export type StartBookingPayload = {
  __typename?: 'StartBookingPayload';
  booking: Booking;
  errors?: Maybe<Array<Error>>;
};

export type StartInput = {
  id: Scalars['ID']['input'];
};

export type StartPartneringRequestInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartPartneringRequest */
export type StartPartneringRequestPayload = {
  __typename?: 'StartPartneringRequestPayload';
  errors?: Maybe<Array<Error>>;
  partneringRequest?: Maybe<PartneringRequest>;
};

/** Autogenerated return type of Start */
export type StartPayload = {
  __typename?: 'StartPayload';
  errors?: Maybe<Array<Error>>;
  gameBundle?: Maybe<GameBundle>;
};

export type StartScrimInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartScrim */
export type StartScrimPayload = {
  __typename?: 'StartScrimPayload';
  errors?: Maybe<Array<Error>>;
  scrim?: Maybe<Scrim>;
};

export type StartTournamentEventInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartTournamentEvent */
export type StartTournamentEventPayload = {
  __typename?: 'StartTournamentEventPayload';
  errors?: Maybe<Array<Error>>;
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type StartTournamentInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartTournament */
export type StartTournamentPayload = {
  __typename?: 'StartTournamentPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
};

export type StartTournamentRoomInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of StartTournamentRoom */
export type StartTournamentRoomPayload = {
  __typename?: 'StartTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type SubmitCodeInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of SubmitCode */
export type SubmitCodePayload = {
  __typename?: 'SubmitCodePayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type SubmitDataInput = {
  accountId: Scalars['String']['input'];
  gameId: Scalars['ID']['input'];
  gameRankId?: InputMaybe<Scalars['ID']['input']>;
  inGameName?: InputMaybe<Scalars['String']['input']>;
  kd?: InputMaybe<Scalars['Float']['input']>;
  pairableGameRankIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  proficientRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  rankPoint?: InputMaybe<Scalars['Int']['input']>;
  rankStar?: InputMaybe<Scalars['Int']['input']>;
  rankTier?: InputMaybe<Scalars['Int']['input']>;
  screenshot: Array<Scalars['File']['input']>;
  serverId?: InputMaybe<Scalars['String']['input']>;
  winRate?: InputMaybe<Scalars['Float']['input']>;
};

/** Autogenerated return type of SubmitData */
export type SubmitDataPayload = {
  __typename?: 'SubmitDataPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type SubmitInfoInput = {
  bankAccountNo: Scalars['String']['input'];
  bankName: Scalars['String']['input'];
  country: Scalars['String']['input'];
  ic: Scalars['String']['input'];
  icImage: Scalars['File']['input'];
  name: Scalars['String']['input'];
  selfie: Scalars['File']['input'];
};

/** Autogenerated return type of SubmitInfo */
export type SubmitInfoPayload = {
  __typename?: 'SubmitInfoPayload';
  bankInfo?: Maybe<BankInfo>;
  errors?: Maybe<Array<Error>>;
};

export type SubmitOnlineSchedulesInput = {
  gameId: Scalars['ID']['input'];
  ids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SubmitOnlineSchedules */
export type SubmitOnlineSchedulesPayload = {
  __typename?: 'SubmitOnlineSchedulesPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type SubmitProficientHerosInput = {
  gameId: Scalars['ID']['input'];
  ids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SubmitProficientHeros */
export type SubmitProficientHerosPayload = {
  __typename?: 'SubmitProficientHerosPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type SubmitProficientRolesInput = {
  gameId: Scalars['ID']['input'];
  ids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SubmitProficientRoles */
export type SubmitProficientRolesPayload = {
  __typename?: 'SubmitProficientRolesPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type SubmitRankPairingInput = {
  gameId: Scalars['ID']['input'];
  gameRankIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SubmitRankPairing */
export type SubmitRankPairingPayload = {
  __typename?: 'SubmitRankPairingPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

/** Autogenerated return type of SubmitRankPoint */
export type SubmitRankPointPayload = {
  __typename?: 'SubmitRankPointPayload';
  errors?: Maybe<Array<Error>>;
  gameRank?: Maybe<Scalars['String']['output']>;
  rankTier?: Maybe<Scalars['Int']['output']>;
};

export type SubmitTeamBankInfoInput = {
  bankAccountNo: Scalars['String']['input'];
  bankName: Scalars['String']['input'];
  country: Scalars['String']['input'];
  ic: Scalars['String']['input'];
  icImage: Scalars['File']['input'];
  name: Scalars['String']['input'];
  selfie: Scalars['File']['input'];
};

/** Autogenerated return type of SubmitTeamBankInfo */
export type SubmitTeamBankInfoPayload = {
  __typename?: 'SubmitTeamBankInfoPayload';
  bankInfo?: Maybe<BankInfo>;
  errors?: Maybe<Array<Error>>;
};

export type SuspendGamerRequest = {
  __typename?: 'SuspendGamerRequest';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reason: Scalars['String']['output'];
  state: SuspendRequestState;
};

export type SuspendPilotServiceInput = {
  phoneCode: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
};

/** Autogenerated return type of SuspendPilotService */
export type SuspendPilotServicePayload = {
  __typename?: 'SuspendPilotServicePayload';
  errors?: Maybe<Array<Error>>;
  isSuccess: Scalars['Boolean']['output'];
};

export type SuspendRequest = {
  __typename?: 'SuspendRequest';
  admin: Admin;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  reason: Scalars['String']['output'];
  state: SuspendRequestState;
};

export enum SuspendRequestState {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** Target */
export type Target = GameBundle | PartneringRequest;

export type Team = {
  __typename?: 'Team';
  allChatrooms: Array<Chatroom>;
  allCombatRoomSize: Scalars['Int']['output'];
  allCombatRooms: TeamCombatRoomCount;
  allScrims: Array<Scrim>;
  availableRealtimes: Array<Scrim>;
  availableSchedules: Array<Scrim>;
  availableTimeValid: Scalars['Boolean']['output'];
  bankInfo?: Maybe<BankInfo>;
  careerHighlights?: Maybe<Array<CareerHighlight>>;
  chatroomId: Scalars['ID']['output'];
  club?: Maybe<Club>;
  clubId: Scalars['ID']['output'];
  combatStartTime: Scalars['ISO8601DateTime']['output'];
  combatTeams?: Maybe<Array<CombatTeam>>;
  country: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  currentCombat?: Maybe<CombatTeam>;
  currentCombatId?: Maybe<Scalars['ID']['output']>;
  currentCombatRoom?: Maybe<CombatRoom>;
  deleted: Scalars['Boolean']['output'];
  founded?: Maybe<Scalars['ISO8601DateTime']['output']>;
  game: Game;
  gameId: Scalars['ID']['output'];
  guestScrims?: Maybe<Array<Scrim>>;
  hostScrims?: Maybe<Array<Scrim>>;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isManager: Scalars['Boolean']['output'];
  isPlayer: Scalars['Boolean']['output'];
  joinRequests: Array<JoinRequest>;
  lastCombatTeamScore: Scalars['Int']['output'];
  lastMessage?: Maybe<Message>;
  location?: Maybe<Scalars['String']['output']>;
  loseMatches?: Maybe<Array<MatchResult>>;
  manager: User;
  matchCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  onlineCount: Scalars['Int']['output'];
  overview?: Maybe<Scalars['String']['output']>;
  paginatedHistoryLeaderboard: Array<CombatRoom>;
  paginatedRealtimes: Array<Scrim>;
  paginatedSchedules: Array<Scrim>;
  pendingInvitationId?: Maybe<Scalars['ID']['output']>;
  pendingRequestId?: Maybe<Scalars['ID']['output']>;
  pilots: Array<Pilot>;
  reason?: Maybe<Scalars['String']['output']>;
  recentCombats?: Maybe<Array<CombatRoom>>;
  registeredTournament: Scalars['Boolean']['output'];
  scrim?: Maybe<Scrim>;
  scrimable: Scalars['Boolean']['output'];
  state?: Maybe<Scalars['String']['output']>;
  suspend?: Maybe<Scalars['Boolean']['output']>;
  teamChatroom: Chatroom;
  teamCombatTeams?: Maybe<Array<CombatTeam>>;
  teamInvitations: Array<TeamInvitation>;
  teamMembers: Scalars['Int']['output'];
  teamRolePlayers: Array<User>;
  teamRoles: Array<TeamRole>;
  teamWallet?: Maybe<TeamWallet>;
  themeColor?: Maybe<Scalars['String']['output']>;
  themeColors?: Maybe<Array<Scalars['String']['output']>>;
  tier?: Maybe<Scalars['String']['output']>;
  tournamentTeam?: Maybe<TournamentTeam>;
  tournamentTeams?: Maybe<Array<TournamentTeam>>;
  town?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  users: Array<User>;
  usersCount: Scalars['Int']['output'];
  verified: Scalars['Boolean']['output'];
  winCount?: Maybe<Scalars['Int']['output']>;
  winMatches?: Maybe<Array<MatchResult>>;
};


export type TeamAllCombatRoomsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type TeamPaginatedHistoryLeaderboardArgs = {
  leaderboardId?: InputMaybe<Scalars['ID']['input']>;
};


export type TeamPaginatedRealtimesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<ScrimState>;
};


export type TeamPaginatedSchedulesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  states: Array<ScrimState>;
};


export type TeamScrimArgs = {
  scrimId: Scalars['ID']['input'];
};


export type TeamUsersArgs = {
  all?: InputMaybe<Scalars['Boolean']['input']>;
  searchUser?: InputMaybe<Scalars['String']['input']>;
};

/** Team Combat Rooms include counter */
export type TeamCombatRoomCount = {
  __typename?: 'TeamCombatRoomCount';
  count: Scalars['Int']['output'];
  data: Array<CombatRoom>;
};

export type TeamInvitation = {
  __typename?: 'TeamInvitation';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  pilot?: Maybe<Pilot>;
  state: TeamInvitationState;
  team: Team;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
};

export enum TeamInvitationState {
  Accepted = 'accepted',
  Cancelled = 'cancelled',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** TeamPayout */
export type TeamPayout = {
  __typename?: 'TeamPayout';
  adminNote?: Maybe<Scalars['String']['output']>;
  amount: Scalars['Float']['output'];
  approve: Scalars['Boolean']['output'];
  bank: Scalars['String']['output'];
  bankAccountNo: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  ic: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  pilot: Pilot;
  recipient?: Maybe<Scalars['String']['output']>;
  rejectReason?: Maybe<Scalars['String']['output']>;
  state: TeamPayoutState;
  teamWallet: TeamWallet;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type TeamPayoutRequestInput = {
  amount: Scalars['Float']['input'];
};

/** Autogenerated return type of TeamPayoutRequest */
export type TeamPayoutRequestPayload = {
  __typename?: 'TeamPayoutRequestPayload';
  errors?: Maybe<Array<Error>>;
  teamPayout?: Maybe<TeamPayout>;
};

export enum TeamPayoutState {
  Pending = 'pending',
  Processing = 'processing',
  Rejected = 'rejected',
  TransactionFailed = 'transaction_failed',
  TransactionSuccess = 'transaction_success'
}

export type TeamRole = {
  __typename?: 'TeamRole';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  online: Scalars['Boolean']['output'];
  pilot?: Maybe<Pilot>;
  proficientRole?: Maybe<ProficientRole>;
  team: Team;
  user?: Maybe<User>;
};

/** Team Wallet */
export type TeamWallet = {
  __typename?: 'TeamWallet';
  amount: Scalars['Float']['output'];
  countryCode: CountryCode;
  creditTransactions: Array<CreditTransaction>;
  credits: Array<CreditTransaction>;
  currency: Scalars['String']['output'];
  debits: Array<CreditTransaction>;
  id: Scalars['ID']['output'];
  team: Team;
  teamCreditTransactions: CreditTransactionsCount;
  teamPayouts: Array<TeamPayout>;
  transactionHistory: Array<CreditTransaction>;
};


/** Team Wallet */
export type TeamWalletTeamCreditTransactionsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};

export enum TestState {
  TestFailed = 'test_failed',
  TestNonRetryable = 'test_non_retryable',
  TestPassed = 'test_passed',
  TestPending = 'test_pending'
}

/** Autogenerated return type of TixcartePurchase */
export type TixcartePurchasePayload = {
  __typename?: 'TixcartePurchasePayload';
  errors?: Maybe<Array<Error>>;
  privateKey: Scalars['String']['output'];
  publicKey: Scalars['String']['output'];
};

export type TopUpInput = {
  amount: Scalars['Int']['input'];
  version?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of TopUp */
export type TopUpPayload = {
  __typename?: 'TopUpPayload';
  errors?: Maybe<Array<Error>>;
  sessionId?: Maybe<Scalars['String']['output']>;
};

export type Topic = {
  __typename?: 'Topic';
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  prosOnly: Scalars['Boolean']['output'];
  text: Scalars['String']['output'];
  video: Scalars['String']['output'];
};

/** Topup Product Type */
export type TopupProduct = {
  __typename?: 'TopupProduct';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Category>;
  code?: Maybe<Scalars['String']['output']>;
  countryCodes?: Maybe<Array<Scalars['String']['output']>>;
  coverUrl?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  genre?: Maybe<GameGenre>;
  helperUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  items?: Maybe<Array<TopupProductItem>>;
  logoUrl?: Maybe<Scalars['String']['output']>;
  ordering?: Maybe<Scalars['Int']['output']>;
  originId: Scalars['Int']['output'];
  publisher?: Maybe<Publisher>;
  publisherLogoUrl?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  userInput?: Maybe<TopupProductUserInput>;
  vendor?: Maybe<Vendor>;
  vocaId?: Maybe<Scalars['Int']['output']>;
};

/** Product Attribute Data Type */
export type TopupProductAttrData = {
  __typename?: 'TopupProductAttrData';
  id: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

/** Topup product checkout */
export type TopupProductCheckout = {
  __typename?: 'TopupProductCheckout';
  currency: Scalars['String']['output'];
  gameAccountId: Scalars['String']['output'];
  invoiceId: Scalars['ID']['output'];
  orderId: Scalars['ID']['output'];
  productItemName: Scalars['String']['output'];
  productName: Scalars['String']['output'];
  reference: Scalars['String']['output'];
  sn: Scalars['String']['output'];
  totalAmount: Scalars['Float']['output'];
  trxDate: Scalars['String']['output'];
};

export type TopupProductCheckoutInput = {
  gameAccountId: Scalars['ID']['input'];
  id: Scalars['ID']['input'];
  itemId: Scalars['ID']['input'];
  securityCode: Scalars['String']['input'];
  voucherId?: InputMaybe<Scalars['ID']['input']>;
  zoneId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of TopupProductCheckout */
export type TopupProductCheckoutPayload = {
  __typename?: 'TopupProductCheckoutPayload';
  errors?: Maybe<Array<Error>>;
  topupProductCheckout: TopupProductCheckout;
};

/** Topup Product Detail Type */
export type TopupProductDetail = {
  __typename?: 'TopupProductDetail';
  accountId?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  helperUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isRequiredZoneId: Scalars['Boolean']['output'];
  logoUrl?: Maybe<Scalars['String']['output']>;
  originId?: Maybe<Scalars['Int']['output']>;
  serverId?: Maybe<Scalars['String']['output']>;
  sortOrder?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  userInput?: Maybe<TopupProductUserInput>;
  vendor?: Maybe<Scalars['String']['output']>;
};

export type TopupProductInquiryInput = {
  gameAccountId: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  zoneId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of TopupProductInquiry */
export type TopupProductInquiryPayload = {
  __typename?: 'TopupProductInquiryPayload';
  errors?: Maybe<Array<Error>>;
  ign?: Maybe<Scalars['String']['output']>;
  message: Scalars['String']['output'];
};

/** Topup Product Item Type */
export type TopupProductItem = {
  __typename?: 'TopupProductItem';
  discount?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  iconUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  isPromo: Scalars['Boolean']['output'];
  name?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  priceAsMoney?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
};

/** Topup Product Merchant Type */
export type TopupProductMerchant = {
  __typename?: 'TopupProductMerchant';
  balance?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};

/** Topup Product User input Type */
export type TopupProductUserInput = {
  __typename?: 'TopupProductUserInput';
  fields: Array<TopupProductUserInputFields>;
  id: Scalars['ID']['output'];
  instructionText?: Maybe<Scalars['String']['output']>;
  isHideData: Scalars['Boolean']['output'];
};

/** Topup Product User input Fields Type */
export type TopupProductUserInputFields = {
  __typename?: 'TopupProductUserInputFields';
  attrs?: Maybe<TopupProductUserInputFieldsAttrs>;
  id?: Maybe<Scalars['ID']['output']>;
  tag?: Maybe<Scalars['String']['output']>;
};

/** Topup User input Field Attrs Type */
export type TopupProductUserInputFieldsAttrs = {
  __typename?: 'TopupProductUserInputFieldsAttrs';
  datas?: Maybe<Array<TopupProductAttrData>>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  placeholder?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type Tournament = {
  __typename?: 'Tournament';
  apiKey?: Maybe<Scalars['String']['output']>;
  backgroundImage?: Maybe<Scalars['String']['output']>;
  clan?: Maybe<Clan>;
  countryCode?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  game: Game;
  id: Scalars['ID']['output'];
  introText?: Maybe<Scalars['String']['output']>;
  invitationCode?: Maybe<Scalars['String']['output']>;
  isOrganizer: Scalars['Boolean']['output'];
  judges?: Maybe<Array<Judge>>;
  logo?: Maybe<Scalars['String']['output']>;
  mode: TournamentMode;
  name: Scalars['String']['output'];
  organizer?: Maybe<User>;
  participantsCount?: Maybe<Scalars['Int']['output']>;
  poolPrizes?: Maybe<Array<PoolPrize>>;
  startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state: TournamentState;
  totalPrize?: Maybe<Scalars['Float']['output']>;
  tournamentEvents?: Maybe<Array<TournamentEvent>>;
  tournamentSettings?: Maybe<Array<TournamentSetting>>;
  tournamentTeams?: Maybe<Array<TournamentTeam>>;
  tournamentUsers?: Maybe<Array<TournamentUser>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  verified?: Maybe<Scalars['Boolean']['output']>;
};

export type TournamentEvent = {
  __typename?: 'TournamentEvent';
  createdAt: Scalars['ISO8601DateTime']['output'];
  endDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  eventType?: Maybe<TournamentEventEvent>;
  id: Scalars['ID']['output'];
  isEnded: Scalars['Boolean']['output'];
  isOngoing: Scalars['Boolean']['output'];
  judge?: Maybe<User>;
  name: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  tournament: Tournament;
  tournamentRooms?: Maybe<Array<TournamentRoom>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
};

export enum TournamentEventEvent {
  DoubleElimination = 'double_elimination',
  Final = 'final',
  PooledRoundRobin = 'pooled_round_robin',
  RandomPairings = 'random_pairings',
  Registration = 'registration',
  RoundRobin = 'round_robin',
  SemiFinal = 'semi_final',
  SingleElimination = 'single_elimination'
}

export enum TournamentEventState {
  Cancelled = 'cancelled',
  Completed = 'completed',
  Pending = 'pending',
  Started = 'started'
}

export enum TournamentMode {
  Solo = 'solo',
  TeamMatch = 'team_match'
}

/** Tournament Room */
export type TournamentRoom = {
  __typename?: 'TournamentRoom';
  battleType: TournamentRoomBattle;
  battles?: Maybe<Array<Battle>>;
  chatroom?: Maybe<Chatroom>;
  checkIn?: Maybe<Scalars['ISO8601DateTime']['output']>;
  checkInMembers?: Maybe<Array<TournamentTeam>>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  judge?: Maybe<Judge>;
  loseTeam?: Maybe<TournamentTeam>;
  roomName?: Maybe<Scalars['String']['output']>;
  state: TournamentRoomState;
  tournamentEvent: TournamentEvent;
  tournamentTeams?: Maybe<Array<TournamentTeam>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  winTeam?: Maybe<TournamentTeam>;
  winTeamId?: Maybe<Scalars['Int']['output']>;
};


/** Tournament Room */
export type TournamentRoomChatroomArgs = {
  id: Scalars['ID']['input'];
};

export enum TournamentRoomBattle {
  B03 = 'B03',
  B05 = 'B05',
  B07 = 'B07',
  SingleElimination = 'single_elimination'
}

export enum TournamentRoomState {
  Cancelled = 'cancelled',
  Completed = 'completed',
  Expired = 'expired',
  Initiating = 'initiating',
  Started = 'started'
}

/** Tournament Settings */
export type TournamentSetting = {
  __typename?: 'TournamentSetting';
  name: Scalars['String']['output'];
  tournament: Tournament;
  value: Scalars['String']['output'];
};

export enum TournamentState {
  Active = 'active',
  Cancelled = 'cancelled',
  Completed = 'completed',
  Expired = 'expired',
  Started = 'started',
  Suspended = 'suspended'
}

export type TournamentTeam = {
  __typename?: 'TournamentTeam';
  camps?: Maybe<Array<Camp>>;
  captain: User;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  isManager: Scalars['Boolean']['output'];
  loseCount?: Maybe<Scalars['Int']['output']>;
  players: Array<User>;
  state: TournamentTeamState;
  subPlayers: Array<User>;
  team: Team;
  teamName?: Maybe<Scalars['String']['output']>;
  tournament: Tournament;
  tournamentRooms?: Maybe<Array<TournamentRoom>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Tournament Teams include counter */
export type TournamentTeamCount = {
  __typename?: 'TournamentTeamCount';
  count: Scalars['Int']['output'];
  data: Array<TournamentTeam>;
};

export type TournamentTeamInput = {
  id: Scalars['ID']['input'];
  stateRequest: Scalars['String']['input'];
};

/** Autogenerated return type of TournamentTeam */
export type TournamentTeamPayload = {
  __typename?: 'TournamentTeamPayload';
  errors?: Maybe<Array<Error>>;
  tournamentTeam?: Maybe<TournamentTeam>;
};

export enum TournamentTeamState {
  Cancelled = 'cancelled',
  Disqualified = 'disqualified',
  Pending = 'pending',
  Qualified = 'qualified'
}

export type TournamentUser = {
  __typename?: 'TournamentUser';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  state: TournamentUserState;
  tournament: Tournament;
  tournamentRooms?: Maybe<Array<TournamentRoom>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
};

export enum TournamentUserState {
  Cancelled = 'cancelled',
  Disqualified = 'disqualified',
  Pending = 'pending',
  Qualified = 'qualified'
}

export enum Transaction {
  Bonus = 'bonus',
  CancelFee = 'cancel_fee',
  ContestBonus = 'contest_bonus',
  DepositDeduction = 'deposit_deduction',
  Earn = 'earn',
  GameCredit = 'game_credit',
  Giveaway = 'giveaway',
  Merchandise = 'merchandise',
  Payout = 'payout',
  Penalty = 'penalty',
  PoolPrize = 'pool_prize',
  RankReward = 'rank_reward',
  ReceiveCredit = 'receive_credit',
  Referral = 'referral',
  Refund = 'refund',
  RefundDeduction = 'refund_deduction',
  RegistrationFees = 'registration_fees',
  RegistrationRefund = 'registration_refund',
  SendCredit = 'send_credit',
  Spend = 'spend',
  TeamPayout = 'team_payout',
  Topup = 'topup',
  TransactionFee = 'transaction_fee',
  Transfer = 'transfer'
}

export type TransferDepositInput = {
  amount: Scalars['Float']['input'];
};

/** Autogenerated return type of TransferDeposit */
export type TransferDepositPayload = {
  __typename?: 'TransferDepositPayload';
  errors?: Maybe<Array<Error>>;
  sideWallet: SideWallet;
};

export type UnblockUserInput = {
  userId: Scalars['ID']['input'];
};

/** Autogenerated return type of UnblockUser */
export type UnblockUserPayload = {
  __typename?: 'UnblockUserPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type UnreadCount = {
  __typename?: 'UnreadCount';
  comments: Scalars['Int']['output'];
  follows: Scalars['Int']['output'];
  invites: Scalars['Int']['output'];
  notifications: Scalars['Int']['output'];
};

export type UpdateAddressInput = {
  ipAddress: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateAddress */
export type UpdateAddressPayload = {
  __typename?: 'UpdateAddressPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type UpdateClanInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  avatar?: InputMaybe<Scalars['File']['input']>;
  coverPicture?: InputMaybe<Scalars['File']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  introText?: InputMaybe<Scalars['String']['input']>;
  memberLimit?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerId: Scalars['ID']['input'];
  public?: InputMaybe<Scalars['Boolean']['input']>;
  rules?: InputMaybe<Scalars['String']['input']>;
  targetId?: InputMaybe<Scalars['ID']['input']>;
  targetType?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateClan */
export type UpdateClanPayload = {
  __typename?: 'UpdateClanPayload';
  clan?: Maybe<Clan>;
  errors?: Maybe<Array<Error>>;
};

export type UpdateClubInput = {
  coverPicture?: InputMaybe<Scalars['File']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  founded?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  icon?: InputMaybe<Scalars['File']['input']>;
  id: Scalars['ID']['input'];
  introText?: InputMaybe<Scalars['String']['input']>;
  inviteIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  name?: InputMaybe<Scalars['String']['input']>;
  origin?: InputMaybe<Scalars['String']['input']>;
  overview?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  tagName?: InputMaybe<Scalars['String']['input']>;
  themeColor?: InputMaybe<Scalars['String']['input']>;
  tier?: InputMaybe<ClubTier>;
  town?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateClub */
export type UpdateClubPayload = {
  __typename?: 'UpdateClubPayload';
  club?: Maybe<Club>;
  errors?: Maybe<Array<Error>>;
};

export type UpdateCombatRoomUrlInput = {
  id: Scalars['ID']['input'];
  immediate?: InputMaybe<Scalars['Boolean']['input']>;
  roomUrl: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateCombatRoomUrl */
export type UpdateCombatRoomUrlPayload = {
  __typename?: 'UpdateCombatRoomUrlPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type UpdateCountryCodeInput = {
  countryCode: CountryCode;
};

/** Autogenerated return type of UpdateCountryCode */
export type UpdateCountryCodePayload = {
  __typename?: 'UpdateCountryCodePayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean']['output'];
  user: UserSession;
};

export type UpdateDataInput = {
  accountId?: InputMaybe<Scalars['String']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  gameRankId?: InputMaybe<Scalars['ID']['input']>;
  inGameName?: InputMaybe<Scalars['String']['input']>;
  kd?: InputMaybe<Scalars['Float']['input']>;
  pairableGameRankIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
  proficientRoleIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  rankPoint?: InputMaybe<Scalars['Int']['input']>;
  rankStar?: InputMaybe<Scalars['Int']['input']>;
  rankTier?: InputMaybe<Scalars['Int']['input']>;
  screenshot?: InputMaybe<Array<Scalars['File']['input']>>;
  serverId?: InputMaybe<Scalars['String']['input']>;
  winRate?: InputMaybe<Scalars['Float']['input']>;
};

/** Autogenerated return type of UpdateData */
export type UpdateDataPayload = {
  __typename?: 'UpdateDataPayload';
  errors?: Maybe<Array<Error>>;
  gameAccount?: Maybe<GameAccount>;
};

export type UpdateDiscordIdInput = {
  discordId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateDiscordId */
export type UpdateDiscordIdPayload = {
  __typename?: 'UpdateDiscordIdPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type UpdateEmailInput = {
  email: Scalars['String']['input'];
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateEmail */
export type UpdateEmailPayload = {
  __typename?: 'UpdateEmailPayload';
  email?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Error>>;
};

export type UpdateInfoInput = {
  bankAccountNo?: InputMaybe<Scalars['String']['input']>;
  bankName?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  ic?: InputMaybe<Scalars['String']['input']>;
  icImage?: InputMaybe<Scalars['File']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  selfie?: InputMaybe<Scalars['File']['input']>;
};

/** Autogenerated return type of UpdateInfo */
export type UpdateInfoPayload = {
  __typename?: 'UpdateInfoPayload';
  bankInfo?: Maybe<BankInfo>;
  errors?: Maybe<Array<Error>>;
};

export type UpdateInput = {
  avatar?: InputMaybe<Scalars['File']['input']>;
  birthday?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  coverPicture?: InputMaybe<Scalars['File']['input']>;
  discordId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  gender?: InputMaybe<Gender>;
  icName?: InputMaybe<Scalars['String']['input']>;
  icNumber?: InputMaybe<Scalars['String']['input']>;
  introText?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateMatchMakingInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  backgroundImage?: InputMaybe<Scalars['File']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  gameMode?: InputMaybe<GameMode>;
  id: Scalars['ID']['input'];
  maximumRankId?: InputMaybe<Scalars['ID']['input']>;
  minimumRankId?: InputMaybe<Scalars['ID']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  queueLimit?: InputMaybe<Scalars['Int']['input']>;
  startTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateMatchMaking */
export type UpdateMatchMakingPayload = {
  __typename?: 'UpdateMatchMakingPayload';
  errors?: Maybe<Array<Error>>;
  matchMaking?: Maybe<MatchMaking>;
};

export type UpdateMatchResultInput = {
  id: Scalars['ID']['input'];
  loseTeamId: Scalars['ID']['input'];
  resultScreenshots?: InputMaybe<Array<Scalars['File']['input']>>;
  winTeamId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateMatchResult */
export type UpdateMatchResultPayload = {
  __typename?: 'UpdateMatchResultPayload';
  currentUser?: Maybe<UserSession>;
  errors?: Maybe<Array<Error>>;
  matchResult?: Maybe<MatchResult>;
};

export type UpdateOrderInput = {
  id: Scalars['ID']['input'];
  quantity?: InputMaybe<Scalars['Int']['input']>;
  shippingAddressId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of UpdateOrder */
export type UpdateOrderPayload = {
  __typename?: 'UpdateOrderPayload';
  errors?: Maybe<Array<Error>>;
  order?: Maybe<Order>;
};

export type UpdatePasswordInput = {
  expToken?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  password: Scalars['String']['input'];
  registrationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePassword */
export type UpdatePasswordPayload = {
  __typename?: 'UpdatePasswordPayload';
  errors?: Maybe<Array<Error>>;
  jwt?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

/** Autogenerated return type of Update */
export type UpdatePayload = {
  __typename?: 'UpdatePayload';
  errors?: Maybe<Array<Error>>;
  pilot?: Maybe<Pilot>;
  user?: Maybe<User>;
};

export type UpdatePilotRewardInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  icNumber?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  inGameId?: InputMaybe<Scalars['String']['input']>;
  inGameName?: InputMaybe<Scalars['String']['input']>;
  remark?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePilotReward */
export type UpdatePilotRewardPayload = {
  __typename?: 'UpdatePilotRewardPayload';
  errors?: Maybe<Array<Error>>;
  pilotReward?: Maybe<PilotReward>;
};

export type UpdatePlayerInfoInput = {
  icName?: InputMaybe<Scalars['String']['input']>;
  icNumber?: InputMaybe<Scalars['String']['input']>;
  inGameName?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
  playerId: Scalars['ID']['input'];
  serverId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePlayerInfo */
export type UpdatePlayerInfoPayload = {
  __typename?: 'UpdatePlayerInfoPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type UpdatePoolPrizeInput = {
  amount?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  ordering?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of UpdatePoolPrize */
export type UpdatePoolPrizePayload = {
  __typename?: 'UpdatePoolPrizePayload';
  errors?: Maybe<Array<Error>>;
  poolPrize?: Maybe<PoolPrize>;
};

export type UpdatePostInput = {
  assetId?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
  clanId?: InputMaybe<Scalars['ID']['input']>;
  clubId?: InputMaybe<Scalars['ID']['input']>;
  gameId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  interestId?: InputMaybe<Scalars['ID']['input']>;
  playbackId?: InputMaybe<Scalars['String']['input']>;
  postImages?: InputMaybe<Array<Scalars['File']['input']>>;
  postVideo?: InputMaybe<Scalars['File']['input']>;
  targetId?: InputMaybe<Scalars['ID']['input']>;
  targetType?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  uploadId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePost */
export type UpdatePostPayload = {
  __typename?: 'UpdatePostPayload';
  errors?: Maybe<Array<Error>>;
  post?: Maybe<Post>;
};

export type UpdateRegistrationIdsInput = {
  expToken?: InputMaybe<Scalars['String']['input']>;
  ids?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateRegistrationIds */
export type UpdateRegistrationIdsPayload = {
  __typename?: 'UpdateRegistrationIdsPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<SimpleUser>;
};

export type UpdateScreenshotInput = {
  id: Scalars['ID']['input'];
  resultScreenshots: Array<Scalars['File']['input']>;
  winCampId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateScreenshot */
export type UpdateScreenshotPayload = {
  __typename?: 'UpdateScreenshotPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<Camp>;
};

/** Autogenerated return type of UpdateSecurityCode */
export type UpdateSecurityCodePayload = {
  __typename?: 'UpdateSecurityCodePayload';
  errors?: Maybe<Array<Error>>;
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

export type UpdateShippingAddressInput = {
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateShippingAddress */
export type UpdateShippingAddressPayload = {
  __typename?: 'UpdateShippingAddressPayload';
  errors?: Maybe<Array<Error>>;
  shippingAddress?: Maybe<ShippingAddress>;
};

export type UpdateStartTimeInput = {
  id: Scalars['ID']['input'];
  startTime: Scalars['ISO8601DateTime']['input'];
  tournamentRoomId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateStartTime */
export type UpdateStartTimePayload = {
  __typename?: 'UpdateStartTimePayload';
  battle?: Maybe<Battle>;
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type UpdateTeamBankInfoInput = {
  bankAccountNo?: InputMaybe<Scalars['String']['input']>;
  bankName?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  ic?: InputMaybe<Scalars['String']['input']>;
  icImage?: InputMaybe<Scalars['File']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  selfie?: InputMaybe<Scalars['File']['input']>;
};

/** Autogenerated return type of UpdateTeamBankInfo */
export type UpdateTeamBankInfoPayload = {
  __typename?: 'UpdateTeamBankInfoPayload';
  bankInfo?: Maybe<BankInfo>;
  errors?: Maybe<Array<Error>>;
};

export type UpdateTeamInput = {
  country?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  town?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTeam */
export type UpdateTeamPayload = {
  __typename?: 'UpdateTeamPayload';
  errors?: Maybe<Array<Error>>;
  team?: Maybe<Team>;
};

export type UpdateTeamRoleOnlineInput = {
  combatRoomId?: InputMaybe<Scalars['ID']['input']>;
  online: Scalars['Boolean']['input'];
};

/** Autogenerated return type of UpdateTeamRoleOnline */
export type UpdateTeamRoleOnlinePayload = {
  __typename?: 'UpdateTeamRoleOnlinePayload';
  errors?: Maybe<Array<Error>>;
  isLast: Scalars['Boolean']['output'];
  teamRole?: Maybe<TeamRole>;
};

export type UpdateTournamentEventInput = {
  endDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  eventType?: InputMaybe<Event>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  tournamentTeamIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of UpdateTournamentEvent */
export type UpdateTournamentEventPayload = {
  __typename?: 'UpdateTournamentEventPayload';
  errors?: Maybe<Array<Error>>;
  tournamentEvent?: Maybe<TournamentEvent>;
};

export type UpdateTournamentInput = {
  apiKey?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['File']['input']>;
  countryCode?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  introText?: InputMaybe<Scalars['String']['input']>;
  invitationCode?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['File']['input']>;
  mode?: InputMaybe<TournamentMode>;
  name?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<TournamentState>;
};

/** Autogenerated return type of UpdateTournament */
export type UpdateTournamentPayload = {
  __typename?: 'UpdateTournamentPayload';
  errors?: Maybe<Array<Error>>;
  tournament?: Maybe<Tournament>;
};

export type UpdateTournamentRoomInput = {
  battleType?: InputMaybe<TournamentRoomBattle>;
  id: Scalars['ID']['input'];
  roomName?: InputMaybe<Scalars['String']['input']>;
  tournamentTeamIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of UpdateTournamentRoom */
export type UpdateTournamentRoomPayload = {
  __typename?: 'UpdateTournamentRoomPayload';
  errors?: Maybe<Array<Error>>;
  tournamentRoom?: Maybe<TournamentRoom>;
};

export type UpdateTournamentSettingInput = {
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTournamentSetting */
export type UpdateTournamentSettingPayload = {
  __typename?: 'UpdateTournamentSettingPayload';
  errors?: Maybe<Array<Error>>;
  tournamentSetting?: Maybe<TournamentSetting>;
};

export type UpdateTournamentTeamInput = {
  captainId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  playerIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  subPlayerIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  teamId?: InputMaybe<Scalars['ID']['input']>;
  tournamentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of UpdateTournamentTeam */
export type UpdateTournamentTeamPayload = {
  __typename?: 'UpdateTournamentTeamPayload';
  errors?: Maybe<Array<Error>>;
  tournamentTeam?: Maybe<TournamentTeam>;
};

export type UpdateUserPrizeInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  icNumber?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  inGameId?: InputMaybe<Scalars['String']['input']>;
  inGameName?: InputMaybe<Scalars['String']['input']>;
  printName?: InputMaybe<Scalars['String']['input']>;
  remark?: InputMaybe<Scalars['String']['input']>;
  skinName?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateUserPrize */
export type UpdateUserPrizePayload = {
  __typename?: 'UpdateUserPrizePayload';
  errors?: Maybe<Array<Error>>;
  userPrize?: Maybe<UserPrize>;
};

export type UploadUrl = {
  __typename?: 'UploadUrl';
  uploadId: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/** User */
export type User = {
  __typename?: 'User';
  _id: Scalars['ID']['output'];
  adminNote?: Maybe<Scalars['String']['output']>;
  allPrivateChatrooms: Array<Chatroom>;
  avatar?: Maybe<Scalars['String']['output']>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  bankInfo?: Maybe<BankInfo>;
  beKol: Scalars['Boolean']['output'];
  bePro: Scalars['Boolean']['output'];
  beStar: Scalars['Boolean']['output'];
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  blockUsers?: Maybe<Array<BlockUser>>;
  blockedUsers?: Maybe<Array<User>>;
  bookings?: Maybe<Array<Booking>>;
  bookingsRatingCount?: Maybe<Scalars['Float']['output']>;
  career?: Maybe<Scalars['String']['output']>;
  careerHighlights?: Maybe<Array<CareerHighlight>>;
  cartOrders?: Maybe<Cart>;
  chatroom?: Maybe<Chatroom>;
  chatroomId?: Maybe<Scalars['ID']['output']>;
  clansCount: Scalars['Int']['output'];
  club?: Maybe<Club>;
  combatRooms?: Maybe<Array<CombatRoom>>;
  commission?: Maybe<Scalars['Float']['output']>;
  completedBookingsCount: Scalars['Int']['output'];
  countryCode: CountryCode;
  coverPictureUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditWallet: CreditWallet;
  currentJoinRequest?: Maybe<JoinRequest>;
  currentRealtime?: Maybe<PartneringRequest>;
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  followed: Scalars['Boolean']['output'];
  followersCount: Scalars['Int']['output'];
  followingCount: Scalars['Int']['output'];
  fullName?: Maybe<Scalars['String']['output']>;
  gameAccounts: Array<GameAccount>;
  gameBundles: Array<GameBundle>;
  gender?: Maybe<Gender>;
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  indicators?: Maybe<Indicator>;
  introText?: Maybe<Scalars['String']['output']>;
  isBlocked: Scalars['Boolean']['output'];
  isManager: Scalars['Boolean']['output'];
  language: Language;
  lastSignInAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  liked: Scalars['Boolean']['output'];
  likesCount: Scalars['Int']['output'];
  matchMakingBookings?: Maybe<Array<Booking>>;
  matchMakings?: Maybe<Array<MatchMaking>>;
  merchandises?: Maybe<Array<Merchandise>>;
  mlbbAccount?: Maybe<GameAccount>;
  name: Scalars['String']['output'];
  nationality?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  notifications: Array<Notification>;
  officialName?: Maybe<Scalars['String']['output']>;
  online: Scalars['Boolean']['output'];
  orderHistory?: Maybe<Array<Order>>;
  overview?: Maybe<Scalars['String']['output']>;
  partneringRequests: Array<PartneringRequest>;
  pendingJoinRequests?: Maybe<Array<JoinRequest>>;
  pendingPrize: Scalars['Int']['output'];
  phoneCode?: Maybe<Scalars['String']['output']>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
  postsCount: Scalars['Int']['output'];
  privateChatroom?: Maybe<Chatroom>;
  proPhotoUrl?: Maybe<Scalars['String']['output']>;
  promoCodes?: Maybe<Array<PromoCode>>;
  recentCombats?: Maybe<Array<CombatRoom>>;
  referralCode: Scalars['String']['output'];
  referrals?: Maybe<Array<User>>;
  referrer?: Maybe<Referrer>;
  referrerId?: Maybe<Scalars['String']['output']>;
  shippingAddresses?: Maybe<Array<ShippingAddress>>;
  signInCount: Scalars['Int']['output'];
  suspend: Scalars['Boolean']['output'];
  suspendGamerRequests?: Maybe<Array<SuspendGamerRequest>>;
  team?: Maybe<Team>;
  teamChatrooms?: Maybe<Array<Chatroom>>;
  teamInvitation?: Maybe<TeamInvitation>;
  teamInvitations: Array<TeamInvitation>;
  teamName?: Maybe<Scalars['String']['output']>;
  teamRole?: Maybe<TeamRole>;
  themeColors?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  userCreditTransaction: UserCreditTransactionCount;
  userIdApple?: Maybe<Scalars['String']['output']>;
  userIdGoogle?: Maybe<Scalars['String']['output']>;
  userIdInstagram?: Maybe<Scalars['String']['output']>;
  userIdTiktok?: Maybe<Scalars['String']['output']>;
  userMatchCount?: Maybe<Scalars['Int']['output']>;
  userPrizes?: Maybe<Array<UserPrize>>;
  userPrizesCount: Scalars['Int']['output'];
  userWinCount?: Maybe<Scalars['Int']['output']>;
  verified: Scalars['Boolean']['output'];
};


/** User */
export type UserChatroomArgs = {
  id: Scalars['ID']['input'];
};


/** User */
export type UserMatchMakingBookingsArgs = {
  matchMakingId?: InputMaybe<Scalars['ID']['input']>;
};


/** User */
export type UserMatchMakingsArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
  state: Array<MatchMakingState>;
};


/** User */
export type UserNotificationsArgs = {
  gameId?: InputMaybe<Scalars['ID']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
};


/** User */
export type UserOrderHistoryArgs = {
  status: Array<OrderStatus>;
};


/** User */
export type UserPrivateChatroomArgs = {
  userId: Scalars['ID']['input'];
};


/** User */
export type UserUserCreditTransactionArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};


/** User */
export type UserUserPrizesArgs = {
  page?: InputMaybe<Scalars['Int']['input']>;
};

export type UserAuthorizationInput = {
  countryCode?: InputMaybe<CountryCode>;
  expToken?: InputMaybe<Scalars['String']['input']>;
  ipAddress?: InputMaybe<Scalars['String']['input']>;
  phoneCode: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
  referralCode?: InputMaybe<Scalars['String']['input']>;
  registrationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UserAuthorization */
export type UserAuthorizationPayload = {
  __typename?: 'UserAuthorizationPayload';
  errors?: Maybe<Array<Error>>;
  jwt?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

/** User Credit Transaction include counter */
export type UserCreditTransactionCount = {
  __typename?: 'UserCreditTransactionCount';
  count: Scalars['Int']['output'];
  data: Array<CreditTransaction>;
};

/** User Game Account */
export type UserGameAccount = {
  __typename?: 'UserGameAccount';
  game: Game;
  id: Scalars['ID']['output'];
  proficientHeros: Array<ProficientHero>;
};

export type UserPasswordLoginInput = {
  countryCode?: InputMaybe<Scalars['String']['input']>;
  expToken?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  password: Scalars['String']['input'];
  registrationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UserPasswordLogin */
export type UserPasswordLoginPayload = {
  __typename?: 'UserPasswordLoginPayload';
  currentUser?: Maybe<UserSession>;
  errors?: Maybe<Array<Error>>;
  jwt?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

/** User Prize */
export type UserPrize = {
  __typename?: 'UserPrize';
  address?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditTransactionId: Scalars['ID']['output'];
  fullName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  inGameId?: Maybe<Scalars['String']['output']>;
  inGameName?: Maybe<Scalars['String']['output']>;
  printName?: Maybe<Scalars['String']['output']>;
  prize?: Maybe<Prize>;
  probabilities: Array<Scalars['String']['output']>;
  promoCode?: Maybe<Scalars['String']['output']>;
  remark?: Maybe<Scalars['String']['output']>;
  skinName?: Maybe<Scalars['String']['output']>;
  state: UserPrizeState;
  userId: Scalars['ID']['output'];
  userNickname: Scalars['String']['output'];
};

export enum UserPrizeState {
  Cancelled = 'cancelled',
  Delivered = 'delivered',
  PendingInfo = 'pending_info',
  PendingSpin = 'pending_spin',
  Processing = 'processing'
}

/** UserPromoCode */
export type UserPromoCode = {
  __typename?: 'UserPromoCode';
  id: Scalars['ID']['output'];
  promoCode: PromoCode;
  target: Target;
  user: User;
};

export type UserRequestCodeInput = {
  countryCode?: InputMaybe<CountryCode>;
  ipAddress: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
};

/** Autogenerated return type of UserRequestCode */
export type UserRequestCodePayload = {
  __typename?: 'UserRequestCodePayload';
  errors?: Maybe<Array<Error>>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
};

export type UserRequestLoginInput = {
  countryCode?: InputMaybe<CountryCode>;
  email?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UserRequestLogin */
export type UserRequestLoginPayload = {
  __typename?: 'UserRequestLoginPayload';
  errors?: Maybe<Array<Error>>;
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  newUser?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

/** User Session */
export type UserSession = {
  __typename?: 'UserSession';
  avatarUrl?: Maybe<Scalars['String']['output']>;
  banWeek: Scalars['Int']['output'];
  birthday?: Maybe<Scalars['ISO8601DateTime']['output']>;
  clubId?: Maybe<Scalars['ID']['output']>;
  cooldownTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  countryCode: CountryCode;
  coverPictureUrl?: Maybe<Scalars['String']['output']>;
  creditWalletBalance: Scalars['Float']['output'];
  creditWalletId: Scalars['ID']['output'];
  currentCombatId?: Maybe<Scalars['ID']['output']>;
  currentCombatTeam?: Maybe<CombatTeam>;
  currentRealtime?: Maybe<PartneringRequest>;
  currentRealtimeId?: Maybe<Scalars['ID']['output']>;
  discordId?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  followersCount: Scalars['Int']['output'];
  followingCount: Scalars['Int']['output'];
  gender?: Maybe<Gender>;
  hasSecurityCode: Scalars['Boolean']['output'];
  icName?: Maybe<Scalars['String']['output']>;
  icNumber?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  introText?: Maybe<Scalars['String']['output']>;
  isBanned: Scalars['Boolean']['output'];
  isManager: Scalars['Boolean']['output'];
  isPlayer: Scalars['Boolean']['output'];
  joinRequestIds?: Maybe<Array<Scalars['ID']['output']>>;
  language: Language;
  lastSignInAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  likesCount: Scalars['Int']['output'];
  managerName?: Maybe<Scalars['String']['output']>;
  mlbbAccountId?: Maybe<Scalars['ID']['output']>;
  mlbbTeamId?: Maybe<Scalars['ID']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  phoneCode?: Maybe<Scalars['String']['output']>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
  postsCount: Scalars['Int']['output'];
  referralCode: Scalars['String']['output'];
  referrerId?: Maybe<Scalars['String']['output']>;
  securityCode?: Maybe<Scalars['String']['output']>;
  signInCount: Scalars['Int']['output'];
  suspend: Scalars['Boolean']['output'];
  teamIconUrl?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['ID']['output']>;
  teamInvitationIds?: Maybe<Array<Scalars['ID']['output']>>;
  teamName?: Maybe<Scalars['String']['output']>;
  teamWalletId?: Maybe<Scalars['ID']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  verified: Scalars['Boolean']['output'];
};

export type UserSocialAuthenticationInput = {
  accessToken?: InputMaybe<Scalars['String']['input']>;
  countryCode?: InputMaybe<CountryCode>;
  email?: InputMaybe<Scalars['String']['input']>;
  expToken?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  phoneCode?: InputMaybe<Scalars['String']['input']>;
  provider: Scalars['String']['input'];
  registrationId?: InputMaybe<Scalars['String']['input']>;
  userIdApple?: InputMaybe<Scalars['String']['input']>;
  userIdGoogle?: InputMaybe<Scalars['String']['input']>;
  userIdInstagram?: InputMaybe<Scalars['String']['input']>;
  userIdTiktok?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UserSocialAuthentication */
export type UserSocialAuthenticationPayload = {
  __typename?: 'UserSocialAuthenticationPayload';
  currentUser?: Maybe<UserSession>;
  errors?: Maybe<Array<Error>>;
  hasPassword?: Maybe<Scalars['Boolean']['output']>;
  jwt?: Maybe<Scalars['String']['output']>;
  newUser?: Maybe<Scalars['Boolean']['output']>;
  provider?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type UserSubmitHerosInput = {
  gameId: Scalars['ID']['input'];
  ids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of UserSubmitHeros */
export type UserSubmitHerosPayload = {
  __typename?: 'UserSubmitHerosPayload';
  errors?: Maybe<Array<Error>>;
  userGameAccount?: Maybe<UserGameAccount>;
};

/** Vendor */
export type Vendor = {
  __typename?: 'Vendor';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type ViewPostInput = {
  postId: Scalars['ID']['input'];
};

/** Autogenerated return type of ViewPost */
export type ViewPostPayload = {
  __typename?: 'ViewPostPayload';
  errors?: Maybe<Array<Error>>;
  post?: Maybe<Post>;
};

/** Voca User input Field Attr Datas Type */
export type VocaAttrData = {
  __typename?: 'VocaAttrData';
  id: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

/** Voca Checkout Type */
export type VocaCheckout = {
  __typename?: 'VocaCheckout';
  currency: Scalars['String']['output'];
  gameAccountId: Scalars['String']['output'];
  invoiceId: Scalars['ID']['output'];
  orderId: Scalars['ID']['output'];
  productItemName: Scalars['String']['output'];
  productName: Scalars['String']['output'];
  reference: Scalars['String']['output'];
  sn: Scalars['String']['output'];
  totalAmount: Scalars['Float']['output'];
  trxDate: Scalars['String']['output'];
};

export type VocaCheckoutInput = {
  gameAccountId?: InputMaybe<Scalars['ID']['input']>;
  productId: Scalars['ID']['input'];
  productItemId: Scalars['ID']['input'];
  securityCode: Scalars['String']['input'];
  zoneId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of VocaCheckout */
export type VocaCheckoutPayload = {
  __typename?: 'VocaCheckoutPayload';
  errors?: Maybe<Array<Error>>;
  vocaCheckout: VocaCheckout;
};

export type VocaInquiryInput = {
  gameAccountId: Scalars['String']['input'];
  productId: Scalars['ID']['input'];
  zoneId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of VocaInquiry */
export type VocaInquiryPayload = {
  __typename?: 'VocaInquiryPayload';
  errors?: Maybe<Array<Error>>;
  ign?: Maybe<Scalars['String']['output']>;
  message: Scalars['String']['output'];
};

/** Voca Merchant Type */
export type VocaMerchant = {
  __typename?: 'VocaMerchant';
  balance?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
};

/** Voca Product Type */
export type VocaProduct = {
  __typename?: 'VocaProduct';
  category?: Maybe<Category>;
  code?: Maybe<Scalars['String']['output']>;
  discount?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  isPromo: Scalars['Boolean']['output'];
  logoUrl?: Maybe<Scalars['String']['output']>;
  sortOrder: Scalars['Int']['output'];
  startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  typeOrder?: Maybe<Scalars['String']['output']>;
  vendor?: Maybe<Scalars['String']['output']>;
};

/** Voca Product Detail Type */
export type VocaProductDetail = {
  __typename?: 'VocaProductDetail';
  accountId?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  helperUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isRequiredZoneId: Scalars['Boolean']['output'];
  logoUrl?: Maybe<Scalars['String']['output']>;
  serverId?: Maybe<Scalars['String']['output']>;
  sortOrder?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  userInput: VocaUserInput;
};

/** Voca Product Item Type */
export type VocaProductItem = {
  __typename?: 'VocaProductItem';
  discount?: Maybe<Scalars['Int']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  iconUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  isPromo: Scalars['Boolean']['output'];
  name?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  priceAsMoney?: Maybe<Scalars['String']['output']>;
};

/** Voca User input Type */
export type VocaUserInput = {
  __typename?: 'VocaUserInput';
  fields: Array<VocaUserInputFields>;
  id: Scalars['ID']['output'];
  instructionText?: Maybe<Scalars['String']['output']>;
  isHideData: Scalars['Boolean']['output'];
};

/** Voca User input Field Type */
export type VocaUserInputFields = {
  __typename?: 'VocaUserInputFields';
  attrs?: Maybe<VocaUserInputFieldsAttrs>;
  id?: Maybe<Scalars['ID']['output']>;
  tag?: Maybe<Scalars['String']['output']>;
};

/** Voca User input Fields Type */
export type VocaUserInputFieldsAttrs = {
  __typename?: 'VocaUserInputFieldsAttrs';
  datas?: Maybe<Array<VocaAttrData>>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  placeholder?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type XenditTopUpInput = {
  amount: Scalars['Float']['input'];
};

/** Autogenerated return type of XenditTopUp */
export type XenditTopUpPayload = {
  __typename?: 'XenditTopUpPayload';
  apiKey: Scalars['String']['output'];
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']['output']>;
};

export type AllGetCreditTransactionsQueryVariables = Exact<{ [key: string]: never; }>;


export type AllGetCreditTransactionsQuery = { __typename?: 'Query', allCreditTransactions: Array<{ __typename?: 'CreditTransaction', id: string, amount: number }> };

export type GetCreditWalletQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCreditWalletQuery = { __typename?: 'Query', creditWallet?: { __typename?: 'CreditWallet', user: { __typename?: 'User', id: string, name: string } } | null };


export const AllGetCreditTransactionsDocument = gql`
    query allGetCreditTransactions {
  allCreditTransactions {
    id
    amount
  }
}
    `;

/**
 * __useAllGetCreditTransactionsQuery__
 *
 * To run a query within a React component, call `useAllGetCreditTransactionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllGetCreditTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllGetCreditTransactionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllGetCreditTransactionsQuery(baseOptions?: Apollo.QueryHookOptions<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>(AllGetCreditTransactionsDocument, options);
      }
export function useAllGetCreditTransactionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>(AllGetCreditTransactionsDocument, options);
        }
export function useAllGetCreditTransactionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>(AllGetCreditTransactionsDocument, options);
        }
export type AllGetCreditTransactionsQueryHookResult = ReturnType<typeof useAllGetCreditTransactionsQuery>;
export type AllGetCreditTransactionsLazyQueryHookResult = ReturnType<typeof useAllGetCreditTransactionsLazyQuery>;
export type AllGetCreditTransactionsSuspenseQueryHookResult = ReturnType<typeof useAllGetCreditTransactionsSuspenseQuery>;
export type AllGetCreditTransactionsQueryResult = Apollo.QueryResult<AllGetCreditTransactionsQuery, AllGetCreditTransactionsQueryVariables>;
export const GetCreditWalletDocument = gql`
    query GetCreditWallet {
  creditWallet(id: "1") {
    user {
      id
      name
    }
  }
}
    `;

/**
 * __useGetCreditWalletQuery__
 *
 * To run a query within a React component, call `useGetCreditWalletQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditWalletQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditWalletQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCreditWalletQuery(baseOptions?: Apollo.QueryHookOptions<GetCreditWalletQuery, GetCreditWalletQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditWalletQuery, GetCreditWalletQueryVariables>(GetCreditWalletDocument, options);
      }
export function useGetCreditWalletLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditWalletQuery, GetCreditWalletQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditWalletQuery, GetCreditWalletQueryVariables>(GetCreditWalletDocument, options);
        }
export function useGetCreditWalletSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditWalletQuery, GetCreditWalletQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditWalletQuery, GetCreditWalletQueryVariables>(GetCreditWalletDocument, options);
        }
export type GetCreditWalletQueryHookResult = ReturnType<typeof useGetCreditWalletQuery>;
export type GetCreditWalletLazyQueryHookResult = ReturnType<typeof useGetCreditWalletLazyQuery>;
export type GetCreditWalletSuspenseQueryHookResult = ReturnType<typeof useGetCreditWalletSuspenseQuery>;
export type GetCreditWalletQueryResult = Apollo.QueryResult<GetCreditWalletQuery, GetCreditWalletQueryVariables>;